

#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	рфПерезаписывать = Истина;
	рфВыбратьПервые1000 = Истина;
	рфВыводитьНаборов = 10;
	
	Элементы.рфИмяРегистра.СписокВыбора.Очистить();
	СписокМенеджеров = Новый Массив;
	СписокМенеджеров.Добавить(Метаданные.РегистрыСведений);
	СписокМенеджеров.Добавить(Метаданные.РегистрыНакопления);
	СписокМенеджеров.Добавить(Метаданные.РегистрыБухгалтерии);
	Для каждого Менеджер из СписокМенеджеров цикл
		Для каждого МетаМенеджер из Менеджер цикл
			Элементы.рфИмяРегистра.СписокВыбора.Добавить(МетаМенеджер.ПолноеИмя(), МетаМенеджер.ПолноеИмя() + " | " + МетаМенеджер.Представление());		
		КонецЦикла;   
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура рфИмяРегистраОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") тогда
		рфИмяРегистра = ВыбранноеЗначение.ИменаТипов[0];
		Если СтрНачинаетсяС(рфИмяРегистра, ".") тогда
			рфИмяРегистра = Сред(рфИмяРегистра, 2);	
		КонецЕсли;
		
		рфИмяТаблицы = ВыбранноеЗначение.ИмяТаблицы;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		М = СтрРазделить(ВыбранноеЗначение, ".");  
		рфИмяТаблицы = М[0];
		рфИмяРегистра = М[1];
	Иначе
		ВызватьИсключение "Невозможная ошибка. рфИмяРегистраОбработкаВыбора 202302241101";
	КонецЕсли;	
	рфИмяТаблицы = СтрЗаменить(рфИмяТаблицы, "Регистр", "Регистры");	
	СформироватьОтбор();
	ОчиститьСтарыеЭлементыФормы();
	ОчиститьСоздатьРеквизиты(); 
	ЗаполнитьДекорациюКоличествоСтрок();
КонецПроцедуры

&НаКлиенте
Процедура рфИмяРегистраНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("Регистры",Истина);
	ОткрытьФорму(Объект.ПутьКФормам+".ФормаВыбораТипа", СтруктураПараметров,Элементы.рфИмяРегистра,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура рфИмяРегистраАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) 
	
	Если Ожидание > 0 тогда
		СтандартнаяОбработка = ложь;
		ДанныеВыбора = Новый СписокЗначений;    
		лТекст = нрег(Текст);
		Для каждого стр из Элементы.рфИмяРегистра.СписокВыбора цикл
			Если СтрНайти(нрег(стр.Представление),лТекст)=0 тогда
				Продолжить;
			КонецЕсли;        
			ДанныеВыбора.Добавить(стр.Значение,стр.Представление);	
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура Обработчик_ПередНачаломДобавления_ТаблицаНабораЗаписей(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование тогда
		Возврат;	
	КонецЕсли;
	
	Отказ = Истина; 
	
	Индекс = Число(СтрЗаменить(Элемент.Имя, "АвтоГен_ТаблицаЗаписей_", ""));
	РодительскаяСтр = рфНаборыЗаписейРодительскаяТаблица[Индекс];
	ДочерняяСтр = РодительскаяСтр.рфДочернийНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ДочерняяСтр, РодительскаяСтр); 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрочитатьПоОтборуВТаблицу(Команда)
	
	Если НЕ (ЗначениеЗаполнено(рфИмяРегистра) И ЗначениеЗаполнено(рфИмяТаблицы)) тогда
		Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + ". Не выбран регистр.");
		Возврат;
	КонецЕсли;
	ПрочитатьПоОтборуВТаблицуНаСервере(); 
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаписьИзТаблицыОтбора(Команда)  
	
	Если НЕ (ЗначениеЗаполнено(рфИмяРегистра) И ЗначениеЗаполнено(рфИмяТаблицы)) тогда
		Сообщить(Формат(ТекущаяДата(), "ДЛФ=T") + ". Не выбран регистр.");
		Возврат;
	КонецЕсли;
	
	НачатьЗаписьИзТаблицыОтбораНаСервере();
	ПоказатьЗначение(, Формат(ТекущаяДата(), "ДЛФ=T") + ". Успешно записано");
	
КонецПроцедуры

#КонецОбласти


Процедура СформироватьОтбор() 
	
	ИмяДинСписка = "рфДинСписокОтбор";
	реквизитДинСписок = ЭтаФорма[ИмяДинСписка];
	реквизитДинСписок.ПроизвольныйЗапрос = Ложь;
	реквизитДинСписок.ОсновнаяТаблица = СтрЗаменить(рфИмяТаблицы, "Регистры", "Регистр") + "." + рфИмяРегистра;
	реквизитДинСписок.ДинамическоеСчитываниеДанных = Истина;  
	
КонецПроцедуры

Процедура СгенерироватьИЗаполнитьТаблицы(ДанныеТЗ)
	
	рфНаборБезОтбора.Очистить();
	рфНаборыЗаписейРодительскаяТаблица.Очистить();
	ГруппыДляОчистки = СтрРазделить("ГруппаСгенерированныеНаборыЗаписей",","); 
	Для каждого ИмяГруппы из ГруппыДляОчистки цикл
		Пока Элементы[ИмяГруппы].ПодчиненныеЭлементы.Количество()>0 цикл
			ЭтаФорма.Элементы.Удалить(Элементы[ИмяГруппы].ПодчиненныеЭлементы[0]);	
		КонецЦикла;  	
	КонецЦикла;
	
	
	
	ПоддерживаемыеРегистры = Новый Структура();
	ПоддерживаемыеРегистры.Вставить("РегистрыСведений", РегистрыСведений); 
	ПоддерживаемыеРегистры.Вставить("РегистрыНакопления", РегистрыНакопления);
	ПоддерживаемыеРегистры.Вставить("РегистрыБухгалтерии", РегистрыБухгалтерии);
	
	Менеджер = ПоддерживаемыеРегистры[рфИмяТаблицы][рфИмяРегистра];
	Набор = Менеджер.СоздатьНаборЗаписей();
	
	ТЗ_КолонкиЗаписи = Новый ТаблицаЗначений;
	СписокРеквизитовДочернейТаблицы = ПолучитьРеквизиты("рфНаборыЗаписейРодительскаяТаблица.рфДочернийНаборЗаписей");
	
	СписокКлючейЗаписи = Новый Массив;	
	#Область ПолучитьТЗУникальныхКлючейСтрок
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса+ "Выбрать * Поместить ДанныеТЗ ИЗ &ДанныеТЗ Как ДанныеТЗ; Выбрать Различные ";
	Для счетчик = 0 по Набор.Отбор.Количество()-1 цикл
		ЭлементОтбора = Набор.Отбор[счетчик];	
		ТекстЗапроса = ТекстЗапроса + "ДанныеТЗ." + ЭлементОтбора.Имя + ?(счетчик = Набор.Отбор.Количество()-1 ," ", ",");
		СписокКлючейЗаписи.Добавить(ЭлементОтбора.Имя);
	КонецЦикла; 
	ТекстЗапроса = ТекстЗапроса + " ИЗ ДанныеТЗ КАК ДанныеТЗ;";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ДанныеТЗ", ДанныеТЗ);  
	#КонецОбласти //ПолучитьТЗУникальныхКлючейСтрок
	УникальныеКлючиНабора = Запрос.Выполнить().Выгрузить();
	
	ОтборСтрок = Новый Структура(СтрСоединить(СписокКлючейЗаписи,","));
	Для каждого УникальныйНабор из УникальныеКлючиНабора цикл
		СтрРодТаблица = рфНаборыЗаписейРодительскаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрРодТаблица, УникальныйНабор);  
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок,УникальныйНабор);
		СтрокиПоТекКлючу = ДанныеТЗ.НайтиСтроки(ОтборСтрок);
		Для каждого стрПоКлючу из СтрокиПоТекКлючу цикл
			ДочерняяСтрока = СтрРодТаблица.рфДочернийНаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ДочерняяСтрока, стрПоКлючу);
		КонецЦикла;  
	КонецЦикла;
	
	а = 4;           
	СоздатьНаборов = Мин(рфВыводитьНаборов -1, рфНаборыЗаписейРодительскаяТаблица.Количество()-1); 
	Сообщить("Будет создано наборов: " + Строка(СоздатьНаборов + 1) + " из " + Строка(рфНаборыЗаписейРодительскаяТаблица.Количество()));
	Для счетчик = 0 по СоздатьНаборов цикл	
		СчетчикСтрокой = Формат(счетчик, "ЧН=0; ЧГ=0");
		
		РодительскаяГруппа = ЭтаФорма.Элементы.Добавить("АвтоГен_НаборЗаписей_" + СчетчикСтрокой, Тип("ГруппаФормы"), Элементы.ГруппаСгенерированныеНаборыЗаписей);
		РодительскаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		РодительскаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		РодительскаяГруппа.ОтображатьЗаголовок = Ложь; 
		РодительскаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;   
		РодительскаяГруппа.Видимость = Истина;
		
		ГруппаКлючиСтроки = ЭтаФорма.Элементы.Добавить("АвтоГен_КлючиСтроки_" + СчетчикСтрокой, Тип("ГруппаФормы"), РодительскаяГруппа);
		ГруппаКлючиСтроки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКлючиСтроки.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКлючиСтроки.ОтображатьЗаголовок = Ложь; 
		ГруппаКлючиСтроки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаКлючиСтроки.Видимость = Истина;	
		Для каждого ИмяРеквизита из СписокКлючейЗаписи цикл
			НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяРеквизита + "_" + СчетчикСтрокой, Тип("ПолеФормы"),ГруппаКлючиСтроки);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "рфНаборыЗаписейРодительскаяТаблица[" + СчетчикСтрокой + "]." + ИмяРеквизита;
			НовыйЭлемент.Видимость = Истина;
		КонецЦикла;
		
		ГруппаТаблицаЗаписей = ЭтаФорма.Элементы.Добавить("АвтоГен_Группа_ТаблицаЗаписей_" + СчетчикСтрокой, Тип("ГруппаФормы"), РодительскаяГруппа);
		ГруппаТаблицаЗаписей.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТаблицаЗаписей.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаТаблицаЗаписей.ОтображатьЗаголовок = ЛОЖЬ; 
		ГруппаТаблицаЗаписей.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаТаблицаЗаписей.Видимость = Истина;
		
		ТаблицаПолейВыбора = Элементы.Добавить("АвтоГен_ТаблицаЗаписей_" + СчетчикСтрокой, Тип("ТаблицаФормы"), ГруппаТаблицаЗаписей);
		ТаблицаПолейВыбора.ПутьКДанным = "рфНаборыЗаписейРодительскаяТаблица[" + СчетчикСтрокой + "].рфДочернийНаборЗаписей";
		ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;  
		ТаблицаПолейВыбора.Видимость = Истина;
		Для каждого колонка из СписокРеквизитовДочернейТаблицы цикл
			НовыйЭлемент = Элементы.Добавить(ИмяРеквизита + "_" + Колонка.Имя + "_" + СчетчикСтрокой , Тип("ПолеФормы"), ТаблицаПолейВыбора);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "рфНаборыЗаписейРодительскаяТаблица[" + СчетчикСтрокой + "].рфДочернийНаборЗаписей." + Колонка.Имя;
			НовыйЭлемент.Видимость = Истина;
		КонецЦикла;
		
		ТаблицаПолейВыбора.УстановитьДействие("ПередНачаломДобавления", "Обработчик_ПередНачаломДобавления_ТаблицаНабораЗаписей");
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьПоОтборуВТаблицуНаСервере()
	
	ТЗ = ТекущиеДанныеДинамическогоСписка(рфДинСписокОтбор);  
	СгенерироватьИЗаполнитьТаблицы(ТЗ);
	
КонецПроцедуры 

Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого Элемент Из КоллекцияИсточник Цикл
		ТипЭлемента  = ТипЗнч(Элемент);
		НовыйЭлемент = КоллекцияПриемник.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент) 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьЗаписьИзТаблицыОтбораНаСервере()
	
	ДанныеТЗ = РеквизитФормыВЗначение("рфНаборБезОтбора");
	
	ПоддерживаемыеРегистры = Новый Структура();
	ПоддерживаемыеРегистры.Вставить("РегистрыСведений", РегистрыСведений); 
	ПоддерживаемыеРегистры.Вставить("РегистрыНакопления", РегистрыНакопления);
	ПоддерживаемыеРегистры.Вставить("РегистрыБухгалтерии", РегистрыБухгалтерии);
	
	НачатьТранзакцию();
	
	Менеджер = ПоддерживаемыеРегистры[рфИмяТаблицы][рфИмяРегистра];
	Набор = Менеджер.СоздатьНаборЗаписей();
	
	СписокКлючейЗаписи = Новый Массив;
	#Область ПолучитьТЗУникальныхКлючейСтрок
	ТекстЗапроса = "";
	ТекстЗапроса = ТекстЗапроса+ "Выбрать * Поместить ДанныеТЗ ИЗ &ДанныеТЗ Как ДанныеТЗ; Выбрать Различные ";
	Для счетчик = 0 по Набор.Отбор.Количество()-1 цикл
		ЭлементОтбора = Набор.Отбор[счетчик];	
		ТекстЗапроса = ТекстЗапроса + "ДанныеТЗ." + ЭлементОтбора.Имя + ?(счетчик = Набор.Отбор.Количество()-1 ," ", ",");
		СписокКлючейЗаписи.Добавить(ЭлементОтбора.Имя);
	КонецЦикла; 
	ТекстЗапроса = ТекстЗапроса + " ИЗ ДанныеТЗ КАК ДанныеТЗ;";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса; 
	Запрос.УстановитьПараметр("ДанныеТЗ", ДанныеТЗ);  
	#КонецОбласти //ПолучитьТЗУникальныхКлючейСтрок
	УникальныеКлючиНабора = Запрос.Выполнить().Выгрузить();
	
	ОтборСтрок = Новый Структура(СтрСоединить(СписокКлючейЗаписи,","));
	Для каждого УникальныйНабор из УникальныеКлючиНабора цикл
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок,УникальныйНабор);
		Набор = Менеджер.СоздатьНаборЗаписей();
		Для каждого КлючЗнч из ОтборСтрок цикл
			Набор.Отбор[КлючЗнч.Ключ].Установить(КлючЗнч.Значение);	
		КонецЦикла;
		
		СтрокиПоТекКлючу = ДанныеТЗ.НайтиСтроки(ОтборСтрок);
		Для каждого стрПоКлючу из СтрокиПоТекКлючу цикл
			ДочерняяСтрока = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(ДочерняяСтрока, стрПоКлючу);
		КонецЦикла;  
		
		Набор.Записать(рфПерезаписывать);
	КонецЦикла;
	
	Для каждого СтрРод из рфНаборыЗаписейРодительскаяТаблица цикл
		Набор = Менеджер.СоздатьНаборЗаписей();  
		Для каждого ЭлементОтбора из Набор.Отбор цикл 
			ЭлементОтбора.Установить(СтрРод[ЭлементОтбора.Имя]);	
		КонецЦикла;
		
		Для каждого стрДочерняя из СтрРод.рфДочернийНаборЗаписей цикл
			СтрНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрНабора, стрДочерняя);	
		КонецЦикла;
		Набор.Записать(рфПерезаписывать);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ОчиститьСтарыеЭлементыФормы()
	
	рфНаборыЗаписейРодительскаяТаблица.Очистить();
	рфНаборБезОтбора.Очистить();
	
	ГруппыДляОчистки = СтрРазделить("ГруппаСгенерированныеНаборыЗаписей,рфНаборБезОтбора",","); 
	Для каждого ИмяГруппы из ГруппыДляОчистки цикл
		Пока Элементы[ИмяГруппы].ПодчиненныеЭлементы.Количество()>0 цикл
			ЭтаФорма.Элементы.Удалить(Элементы[ИмяГруппы].ПодчиненныеЭлементы[0]);	
		КонецЦикла;  	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСоздатьРеквизиты()
	
	ПоддерживаемыеРегистры = Новый Структура();
	ПоддерживаемыеРегистры.Вставить("РегистрыСведений", РегистрыСведений); 
	ПоддерживаемыеРегистры.Вставить("РегистрыНакопления", РегистрыНакопления);
	ПоддерживаемыеРегистры.Вставить("РегистрыБухгалтерии", РегистрыБухгалтерии);
	
	Менеджер = ПоддерживаемыеРегистры[рфИмяТаблицы][рфИмяРегистра];
	Набор = Менеджер.СоздатьНаборЗаписей();
	
	УдаляемыеРеквизиты = Новый Массив;
	#Область УдаляюСтарыеРеквизиты_УдаляюСтарыеЭлементыФормы
	Для каждого РодительскийРеквизит из СтрРазделить("рфНаборыЗаписейРодительскаяТаблица,рфНаборыЗаписейРодительскаяТаблица.рфДочернийНаборЗаписей,рфНаборБезОтбора",",") цикл
		СписокРеквизитов = ПолучитьРеквизиты(РодительскийРеквизит);
		Для каждого Рекв из СписокРеквизитов цикл
			Если Рекв.Имя = "рфДочернийНаборЗаписей" тогда
				Продолжить;
			КонецЕсли;
			УдаляемыеРеквизиты.Добавить(Рекв.Путь + "." + Рекв.Имя);
		КонецЦикла;
	КонецЦикла;
	
	#КонецОбласти //УдаляюСтарыеРеквизиты_УдаляюСтарыеЭлементыФормы
	
	НовыеРеквизиты = Новый Массив; 
	
	#Область СозданиеРеквизитов  
	ДанныеПоРеквизитам = Новый Массив;
	МетаРегистр = Набор.Метаданные();
	Для каждого ДанныеПоРазделам из СтрРазделить("СтРек.СтандартныеРеквизиты,Изм.Измерения,Рес.Ресурсы,Рес.Реквизиты", ",") цикл
		ДанныеПоРазделу = СтрРазделить(ДанныеПоРазделам, "."); 
		Для каждого ОписаниеРеквизита из МетаРегистр[ДанныеПоРазделу[1]] цикл
			ДанныеПоРеквизитам.Добавить(Новый Структура("ПрефиксЗаголовка,ОписаниеРеквизита", ДанныеПоРазделу[0], ОписаниеРеквизита));	
		КонецЦикла;
	КонецЦикла;
	
	//Регистр бухгалтерии счетДт и счетКТ не стандартные реквизиты
	СписокКолонок = Набор.ВыгрузитьКолонки().Колонки;
	Для каждого Колонка из СписокКолонок цикл
		НеНашел = Истина;
		Для каждого ДанныеПоРеквизиту из ДанныеПоРеквизитам цикл	
			Если ДанныеПоРеквизиту.ОписаниеРеквизита.Имя = Колонка.Имя тогда
				НеНашел = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НеНашел тогда
			ДанныеПоРеквизитам.Добавить(Новый Структура("ПрефиксЗаголовка,ОписаниеРеквизита", "Уник", Новый Структура("Имя,Тип", Колонка.Имя, Колонка.ТипЗначения)));	
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеПоРеквизиту из ДанныеПоРеквизитам цикл  
		Колонка = ДанныеПоРеквизиту.ОписаниеРеквизита; 
		НужноПропустить = Ложь;
		Если Колонка.Тип.СодержитТип(Тип("МоментВремени")) тогда
			НужноПропустить = Истина;
		КонецЕсли; 
		Если Колонка.Тип.СодержитТип(Тип("ХранилищеЗначения")) тогда
			НужноПропустить = Истина;
		КонецЕсли;
		Если Колонка.Тип.Типы().Количество() = 0 тогда
			НужноПропустить = Истина;	
		КонецЕсли;
		
		Если НужноПропустить тогда 
			МассивСтрокТипов = Новый Массив;
			Для каждого Тип из Колонка.Тип.Типы() цикл
				МассивСтрокТипов.Добавить(Строка(Тип));	
			КонецЦикла;
			Сообщить( Формат(ТекущаяДата(), "ДЛФ=T") + ". Пропущен: " + Строка(Колонка.Имя) + " содержит: " + СтрСоединить(МассивСтрокТипов, ",") + "."); 
			Продолжить;
		КонецЕсли;
		лЗаголовок = ДанныеПоРеквизиту.ПрефиксЗаголовка + "_" + Колонка.Имя;
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип , "рфНаборыЗаписейРодительскаяТаблица.рфДочернийНаборЗаписей", лЗаголовок));
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.Тип , "рфНаборБезОтбора", лЗаголовок));
	КонецЦикла;
	
	Для каждого ЭлементОтбора из Набор.Отбор цикл
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(ЭлементОтбора.Имя, ЭлементОтбора.ТипЗначения, "рфНаборыЗаписейРодительскаяТаблица"));
	КонецЦикла; 
	#КонецОбласти //СозданиеРеквизитов
	
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
	ИмяРеквизитаТЗ = "рфНаборБезОтбора";
	ТЗ = РеквизитФормыВЗначение(ИмяРеквизитаТЗ); 
	Для каждого колонка из ТЗ.Колонки цикл
		НовыйЭлемент = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяРеквизитаТЗ]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = ИмяРеквизитаТЗ + "." + Колонка.Имя;
		НовыйЭлемент.Видимость = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДекорациюКоличествоСтрок()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоСтрок
		|ИЗ
		|	" + СтрЗаменить(рфИмяТаблицы, "Регистры", "Регистр") + "." + рфИмяРегистра + " КАК Таблица";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
   	Элементы.ДекорацияСтрокВТаблице.Заголовок = "Строк в регистре: " + Строка(ВыборкаДетальныеЗаписи.КоличествоСтрок) + ".";
КонецПроцедуры


#КонецОбласти

Функция ТекущиеДанныеДинамическогоСписка(аДинамическийСписок)
	
	ИсточникДанных = аДинамическийСписок;
	
	ТекстЗапроса = ИсточникДанных.ТекстЗапроса;	
	Схема = Новый СхемаЗапроса; 
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	Схема.ПакетЗапросов[0].Операторы[0].КоличествоПолучаемыхЗаписей = ?(рфВыбратьПервые1000, 1000, Неопределено);
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	
	Набор = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Запрос = ТекстЗапроса;
	Набор.АвтоЗаполнениеДоступныхПолей = Истина;
	Набор.ИсточникДанных = Источник.Имя;
	Набор.Имя = Источник.Имя;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникНастроек);
	
	ТекНастройки = Компоновщик.Настройки;
	
	// Выбранные поля
	Для Каждого Элемент Из ТекНастройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Не Элемент.Папка Тогда
			Поле = ТекНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование = Истина;
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	Группа = ТекНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	// Отбор
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.Отбор);
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.КомпоновщикНастроек.ПолучитьНастройки().Отбор);
	
	// Выводим
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ТекНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(Макет);
	Вывод  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	Вывод.УстановитьОбъект(Результат); 
	Вывод.Вывести(Процессор);
	
	Если рфВыбратьПервые1000 И Результат.Количество() = 1000 тогда
		Сообщить("Выбрано: " + Строка(Результат.Количество()) + " записей. Возможно сработало ограничение на записи." );	
	КонецЕсли;
	
	
	КолонкиДляУдаления = Новый Массив;
	Для каждого Колонка из Результат.Колонки цикл
		
		НужноПропустить = Ложь;  
		
		Если Колонка.ТипЗначения.СодержитТип(Тип("МоментВремени")) тогда
			НужноПропустить = Истина;
		КонецЕсли; 
		Если Колонка.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) тогда
			НужноПропустить = Истина;
		КонецЕсли;
		Если Колонка.ТипЗначения.Типы().Количество() = 0 тогда
			НужноПропустить = Истина;	
		КонецЕсли; 
		
		Если НужноПропустить тогда
			КолонкиДляУдаления.Добавить(Колонка.Имя);
		КонецЕсли; 
		
	КонецЦикла;
	Для каждого ИмяНеподдерживаемойКолонки из КолонкиДляУдаления цикл
		Результат.Колонки.Удалить(ИмяНеподдерживаемойКолонки);	
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции 








