
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыборТипа_ПриСозданииНаСервере(ЭтаФорма, Элементы.рфИмяМетаданного, "ВыбораТипаЗавершение");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСчетчик(Счетчик) 
	
	Счетчик = Счетчик + 1;
	Возврат Счетчик;
	
КонецФункции

#КонецОбласти

#Область ВыборТипа

&НаСервереБезКонтекста
Процедура ВыборТипа_ПриСозданииНаСервере(Форма, Элемент, ИмяПроцедурыОП) Экспорт
	
	ЗначениеСуществованияРеквизита = Новый УникальныйИдентификатор; 
	ИмяРеквизитаНастроекВыбораТипа = "рфАвтоматическиСлужебное"; 
	Структура = Новый Структура(ИмяРеквизитаНастроекВыбораТипа, ЗначениеСуществованияРеквизита);
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	Если Структура.рфАвтоматическиСлужебное = ЗначениеСуществованияРеквизита тогда
		СписокРеквизитов = Новый Массив;
		СписокРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаНастроекВыбораТипа, НОвый ОписаниеТипов));
		Форма.ИзменитьРеквизиты(СписокРеквизитов);	
		Форма.рфАвтоматическиСлужебное = Новый Структура;
	КонецЕсли;
	Форма.рфАвтоматическиСлужебное.Вставить(Элемент.Имя, Новый Структура("Имя,ПутьКДанным,ИмяПроцедурыОП", Элемент.Имя, Элемент.ПутьКДанным, ИмяПроцедурыОП));	
	
	Элемент.КнопкаВыбора = Истина;
	Элемент.УстановитьДействие("НачалоВыбора", "ВыборТипа_НачалоВыбора");
	Элемент.УстановитьДействие("АвтоПодбор", "ВыборТипа_АвтоПодбор");
	Элемент.УстановитьДействие("ОбработкаВыбора", "ВыборТипа_ОбработкаВыбора");
	Элемент.УстановитьДействие("ПриИзменении", "ВыборТипа_ПриИзменении");
	
	
	Элемент.СписокВыбора.Очистить();
	СписокМенеджеров = Новый Массив;        
	СписокМенеджеров.Добавить(Метаданные.Справочники);
	СписокМенеджеров.Добавить(Метаданные.Документы);
	СписокМенеджеров.Добавить(Метаданные.ПланыВидовХарактеристик);
	СписокМенеджеров.Добавить(Метаданные.ПланыСчетов);
	СписокМенеджеров.Добавить(Метаданные.ПланыВидовРасчета);
	СписокМенеджеров.Добавить(Метаданные.ПланыОбмена);  
	
	СписокМенеджеров.Добавить(Метаданные.РегистрыСведений); 
	СписокМенеджеров.Добавить(Метаданные.РегистрыНакопления); 
	СписокМенеджеров.Добавить(Метаданные.РегистрыБухгалтерии);  
	
	СписокМенеджеров.Добавить(Метаданные.БизнесПроцессы);
	СписокМенеджеров.Добавить(Метаданные.Задачи);
	
	Для каждого Менеджер из СписокМенеджеров цикл
		Для каждого МетаМенеджер из Менеджер цикл
			Элемент.СписокВыбора.Добавить(МетаМенеджер.ПолноеИмя(), МетаМенеджер.ПолноеИмя() + " | " + МетаМенеджер.Представление());		
		КонецЦикла;   
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипа_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(Объект.ПутьКФормам +".ФормаВыбораТипа", Новый Структура("ЭтоРегистрыИОбъекты", Истина) , Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипа_АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 тогда
		СтандартнаяОбработка = ложь;
		ДанныеВыбора = Новый СписокЗначений;    
		лТекст = нрег(Текст);
		Для каждого стр из Элемент.СписокВыбора цикл
			Если СтрНайти(нрег(стр.Представление),лТекст)=0 тогда
				Продолжить;
			КонецЕсли;        
			ДанныеВыбора.Добавить(стр.Значение,стр.Представление);	
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипа_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;        
	ДанныеПоЭлементу = ЭтаФорма.рфАвтоматическиСлужебное[Элемент.Имя];	
	ОП = Новый ОписаниеОповещения(ДанныеПоЭлементу.ИмяПроцедурыОП, ЭтотОбъект, ДанныеПоЭлементу);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") тогда
		Если ВыбранноеЗначение.ИменаТипов.Количество() = 0 тогда
			Сообщить("Невозможная ошибка. Не выбрали тип и сработал выбор типов.");
			Возврат;
		КонецЕсли;
		ИмяТипа = ВыбранноеЗначение.ИменаТипов[0];
		ИмяТаблицы = ВыбранноеЗначение.ИмяТаблицы; 
		Если ПустаяСтрока(ВыбранноеЗначение.ИмяТаблицы) тогда
			Сообщить("Невозможная ошибка. Сработал выбор и не заполнена имя таблицы.");
			Возврат;
		КонецЕсли;
		ИмяОбъектаТипа = Сред(ИмяТипа, СтрНайти(ИмяТипа,".") + 1); 
		ПолноеИмя = ИмяТаблицы + "." + ИмяОбъектаТипа;  
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		ПолноеИмя = ВыбранноеЗначение; 
	Иначе
		ВызватьИсключение "Невозможная ошибка. 2025_02_05_08_59";
	КонецЕсли;
	
	ЭтаФорма[ДанныеПоЭлементу.ПутьКДанным] = ПолноеИмя;
	ВыполнитьОбработкуОповещения(ОП, ПолноеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипа_ПриИзменении(Элемент)
	
	ДанныеПоЭлементу = ЭтаФорма.рфАвтоматическиСлужебное[Элемент.Имя];	
	ОП = Новый ОписаниеОповещения(ДанныеПоЭлементу.ИмяПроцедурыОП, ЭтотОбъект,ДанныеПоЭлементу);
	ВыполнитьОбработкуОповещения(ОП);
	
КонецПроцедуры

#КонецОбласти //ВыборТипа

&НаКлиенте
Процедура ВыбораТипаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	АнализМетаданных(Результат);
	
	ЭлементыДерева = рфДеревоТипов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.рфДеревоТипов.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

Процедура АнализМетаданных(ТипСтрокой)
	
	МетаОбъект = Метаданные.НайтиПоПолномуИмени(ТипСтрокой);
	Если МетаОбъект = Неопределено тогда
		Сообщить(СтрШаблон("Не существует типа: ""%1"".",ТипСтрокой));
		Возврат;
	КонецЕсли;
	СтрокаКолекцииРеквизитов = "СтандартныеРеквизиты,Измерения,Ресурсы,Реквизиты"; 
	КоллекцииРеквизитов = Новый Структура(СтрокаКолекцииРеквизитов);
	ЗаполнитьЗначенияСвойств(КоллекцииРеквизитов, МетаОбъект); 
	
	ПорядокИмен = СтрРазделить(СтрокаКолекцииРеквизитов,",",Ложь);
	
	рфТабДок.Очистить(); 
	рфДеревоТипов.ПолучитьЭлементы().Очистить();
	
	КолонкаИмяРеквизита = 1;
	КолонкаЗаголовокРеквизита = 2;
	КолонкаТипыРеквизита = 3;
	
	Перечисления_КолонкаИмя = 4;
	Перечисления_КолонкаЗначение = 5;
	Перечисления_КолонкаСиноним = 6;
	
	ВсегоВБазеДокументов = Документы.ТипВсеСсылки().Типы().Количество();
	ВсегоВБазеСправочников = Справочники.ТипВсеСсылки().Типы().Количество();
	
	Счетчик = 0; //Использовать ПолучитьСчетчик(Счетчик), автоинкриментация 
	рфТабДок.Область(ПолучитьСчетчик(Счетчик),1).Текст = ТипСтрокой;
	Для каждого ИмяКоллекции из ПорядокИмен цикл
		СписокРеквизитов = КоллекцииРеквизитов[ИмяКоллекции];
		Если СписокРеквизитов = Неопределено ИЛИ СписокРеквизитов.Количество() = 0 тогда
			Продолжить;
		КонецЕсли;
		ОбластьЗаголовокКоллекции = рфТабДок.Область(ПолучитьСчетчик(Счетчик),1);  
		ОбластьЗаголовокКоллекции.Текст = ИмяКоллекции;  
		ОбластьЗаголовокКоллекции.Шрифт = Новый Шрифт(,16,Истина);
		СтрокаИмяКоллекции = рфДеревоТипов.ПолучитьЭлементы().Добавить();
		СтрокаИмяКоллекции.Имя = ИмяКоллекции;
		
		Для каждого Рекв из СписокРеквизитов цикл
			НачалоОбластьРеквизит = ПолучитьСчетчик(Счетчик);
			ОбластьРеквизита_Имя = рфТабДок.Область(НачалоОбластьРеквизит, КолонкаИмяРеквизита);
			ОбластьРеквизита_Имя.Текст = Рекв.Имя;
			ОбластьРеквизита_Заголовок = рфТабДок.Область(НачалоОбластьРеквизит, КолонкаЗаголовокРеквизита);
			ОбластьРеквизита_Заголовок.Текст = Рекв.Синоним;
			СписокТипов = Рекв.Тип.Типы();
			
			СтрокаРеквизит = СтрокаИмяКоллекции.ПолучитьЭлементы().Добавить();
			СтрокаРеквизит.Имя = Рекв.Имя;
			СтрокаРеквизит.Синоним = Рекв.Синоним;
			
			Если СписокТипов.Количество() > 1 тогда
				а = 4;
			КонецЕсли;
			
			СтруктураРаспределенияТипов = Новый Структура("ПростыеТипы", Новый Массив);
			
			Для каждого ПотенцТип из СписокТипов цикл 
				
				МетаОб = Метаданные.НайтиПоТипу(ПотенцТип);	
				Если МетаОб = Неопределено тогда
					СтрТип = Строка(ПотенцТип);
					СтруктураРаспределенияТипов.ПростыеТипы.Добавить(СтрТип);
				Иначе
					СтрТип = МетаОб.ПолноеИмя();
					НомерДоТочки = СтрНайти(СтрТип,".")-1;
					ИмяМенеджера = Лев(СтрТип, НомерДоТочки);
					
					СписокРеквизитовПоМенеджеру = Неопределено;
					СтруктураРаспределенияТипов.Свойство(ИмяМенеджера, СписокРеквизитовПоМенеджеру);
					Если СписокРеквизитовПоМенеджеру = Неопределено тогда
						СписокРеквизитовПоМенеджеру = Новый Массив;
						СтруктураРаспределенияТипов.Вставить(ИмяМенеджера, СписокРеквизитовПоМенеджеру);
					КонецЕсли;
					СписокРеквизитовПоМенеджеру.Добавить(СтрТип);	
				КонецЕсли;
			КонецЦикла;
			
			ЭтоПервыйВывод = Истина;
			Для каждого КлючЗнч из СтруктураРаспределенияТипов цикл
				Если КлючЗнч.Значение.Количество() = 0 тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПервыйВывод тогда
					текСтрока = НачалоОбластьРеквизит;
					ЭтоПервыйВывод = Ложь;
					ТекСтрокаДерева = СтрокаРеквизит;
				Иначе
					текСтрока = ПолучитьСчетчик(Счетчик);
					ТекСтрокаДерева = СтрокаРеквизит.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				
				ОбластьТипРеквизита = рфТабДок.Область(текСтрока, КолонкаТипыРеквизита);
				
				
				Если КлючЗнч.Ключ = "Документ" тогда
					ОбластьТипРеквизита.Текст = СтрШаблон("%1 (%2\%3): %4",
					КлючЗнч.Ключ,                 
					КлючЗнч.Значение.Количество(),
					ВсегоВБазеДокументов,
					СтрСоединить(КлючЗнч.Значение, ",")					
					);
					Для каждого ИмяОбъекта из КлючЗнч.Значение цикл
						ДочернийОтдельно = ТекСтрокаДерева.ПолучитьЭлементы().Добавить();
						ДочернийОтдельно.ИмяПеречисления = ИмяОбъекта;
					КонецЦикла;
				ИначеЕсли КлючЗнч.Ключ = "Справочник" тогда	
					
					ОбластьТипРеквизита.Текст = СтрШаблон("%1 (%2\%3): %4",
					КлючЗнч.Ключ,                 
					КлючЗнч.Значение.Количество(),
					ВсегоВБазеСправочников,
					СтрСоединить(КлючЗнч.Значение, ",")					
					);
					Для каждого ИмяОбъекта из КлючЗнч.Значение цикл
						ДочернийОтдельно = ТекСтрокаДерева.ПолучитьЭлементы().Добавить();
						ДочернийОтдельно.ИмяПеречисления = ИмяОбъекта;
					КонецЦикла;
				ИначеЕсли КлючЗнч.Ключ = "Перечисление" тогда
					ОбластьТипРеквизита.Текст = КлючЗнч.Ключ + ":";
					
					Для каждого ИмяПеречисления из КлючЗнч.Значение цикл
						
						ОбластьПеречисление = рфТабДок.Область(ПолучитьСчетчик(Счетчик), Перечисления_КолонкаИмя);	
						ОбластьПеречисление.Текст = ИмяПеречисления;
						
						СтрокаПеречисление = ТекСтрокаДерева.ПолучитьЭлементы().Добавить();
						СтрокаПеречисление.ИмяПеречисления = ИмяПеречисления;
						
						МетаПеречисление = Метаданные.НайтиПоПолномуИмени(ИмяПеречисления);	
						Для каждого ЗначПеречисления из МетаПеречисление.ЗначенияПеречисления цикл
							ТекСтрокаПеречисления = ПолучитьСчетчик(Счетчик);
							
							рфТабДок.Область(ТекСтрокаПеречисления, Перечисления_КолонкаЗначение).Текст = ЗначПеречисления.Имя;   
							рфТабДок.Область(ТекСтрокаПеречисления, Перечисления_КолонкаСиноним).Текст = ЗначПеречисления.Синоним;
							
							СтрокаЗначенияПеречисления = СтрокаПеречисление.ПолучитьЭлементы().Добавить();
							СтрокаЗначенияПеречисления.ЗначениеПеречисления = ЗначПеречисления.Имя;
							СтрокаЗначенияПеречисления.СинонимПеречисления = ЗначПеречисления.Синоним;
						КонецЦикла;
					КонецЦикла;	
					
				ИначеЕсли КлючЗнч.Ключ = "ПростыеТипы" тогда
					ОбластьТипРеквизита.Текст = СтрШаблон("%1", СтрСоединить(КлючЗнч.Значение, ","));	
				Иначе
					ОбластьТипРеквизита.Текст = СтрШаблон("%1: %2", КлючЗнч.Ключ, СтрСоединить(КлючЗнч.Значение, ",") );	
				КонецЕсли;
				
				ТекСтрокаДерева.Типы = ОбластьТипРеквизита.Текст;
				
			КонецЦикла;
			
			
			ПоследняяСтрокаРеквизита = рфТабДок.Область(Счетчик,,Счетчик,);
			ПоследняяСтрокаРеквизита.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 3, Истина);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры
