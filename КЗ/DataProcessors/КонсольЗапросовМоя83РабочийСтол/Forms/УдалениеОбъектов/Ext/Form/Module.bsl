

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ПутьКФормам = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя() + ".Форма";
КонецПроцедуры

&НаКлиенте
Процедура рфТипОбъектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(Объект.ПутьКФормам+".ФормаВыбораТипа", ,Элементы.рфТипОбъекта,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура рфТипОбъектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") тогда
		Если ВыбранноеЗначение.ИменаТипов.Количество() = 0 тогда
			Сообщить("Невозможная ошибка. Не выбрали тип и сработал выбор типов.");
			Возврат;
		КонецЕсли;
		ИмяТипа = ВыбранноеЗначение.ИменаТипов[0];
		ИмяТаблицы = ВыбранноеЗначение.ИмяТаблицы; 
		Если ПустаяСтрока(ВыбранноеЗначение.ИмяТаблицы) тогда
			Сообщить("Невозможная ошибка. Сработал выбор и не заполнена имя таблицы.");
			Возврат;
		КонецЕсли;
		ИмяОбъектаТипа = Сред(ИмяТипа, СтрНайти(ИмяТипа,".") + 1); 
		рфТипОбъекта = ИмяТаблицы + "." + ИмяОбъектаТипа;  
		
		ЗапускГенерацияДинСписка("рфДинСписок");
	КонецЕсли;
КонецПроцедуры


Процедура ЗапускГенерацияДинСписка(ИмяДинСписка)
	
	реквизитДинСписок = ЭтаФорма[ИмяДинСписка];
	реквизитДинСписок.ПроизвольныйЗапрос = Ложь;
	реквизитДинСписок.ОсновнаяТаблица = рфТипОбъекта;
	реквизитДинСписок.ДинамическоеСчитываниеДанных = Истина;  
	
	Пока Элементы[ИмяДинСписка].ПодчиненныеЭлементы.Количество()>0 цикл
		ЭтаФорма.Элементы.Удалить(Элементы[ИмяДинСписка].ПодчиненныеЭлементы[0]);	
	КонецЦикла; 
	
	Для каждого Элем из реквизитДинСписок.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы цикл
		Если Элем.ТипЗначения.СодержитТип(Тип("МоментВремени")) тогда
			Продолжить;
		КонецЕсли; 
		Если Элем.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) тогда
			Продолжить;
		КонецЕсли;
		Если Элем.ТипЗначения.Типы().Количество() = 0 тогда
			Продолжить;		
		КонецЕсли;
		
		ИмяРеквизитаТаблицы = ИмяДинСписка;	
		Префикс = ИмяРеквизитаТаблицы;
		Родитель = Элементы[ИмяДинСписка];
		ТекИмя = Строка(Элем.Поле);
		ЭлементФормы = Элементы.Вставить(Префикс + ТекИмя, Тип("ПолеФормы"), Родитель);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = ИмяРеквизитаТаблицы + "." + ТекИмя;
		ЭлементФормы.Заголовок = Элем.Заголовок; 
		
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура рфОбновить(Команда)
	ЗапускГенерацияДинСписка("рфДинСписок");
КонецПроцедуры

//  Читает текущие данные из динамического списка по его настройкам и возвращает в виде таблицы значений.
//
// Параметры:
//    - ИсточникДанных - ДинамическийСписок - реквизит формы.
//
// Возвращаемое значение:
//      ТаблицаЗначений - текущие данные динамического списка.
//
Функция ТекущиеДанныеДинамическогоСписка(ИсточникДанных) Экспорт
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	Источник = СхемаКомпоновки.ИсточникиДанных.Добавить();
	Источник.Имя = "Источник";
	Источник.ТипИсточникаДанных = "local";
	
	Набор = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Запрос = ИсточникДанных.ТекстЗапроса;
	Набор.АвтоЗаполнениеДоступныхПолей = Истина;
	Набор.ИсточникДанных = Источник.Имя;
	Набор.Имя = Источник.Имя;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникНастроек);
	
	ТекНастройки = Компоновщик.Настройки;
	
	// Выбранные поля
	Для Каждого Элемент Из ТекНастройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Не Элемент.Папка Тогда
			Поле = ТекНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование = Истина;
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	Группа = ТекНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	// Отбор
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.Отбор);
	СкопироватьОтборКомпоновкиДанных(ТекНастройки.Отбор, ИсточникДанных.КомпоновщикНастроек.ПолучитьНастройки().Отбор);
	
	// Выводим
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновки, ТекНастройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Процессор = Новый ПроцессорКомпоновкиДанных;
	Процессор.Инициализировать(Макет);
	Вывод  = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Результат = Новый ТаблицаЗначений;
	Вывод.УстановитьОбъект(Результат); 
	Вывод.Вывести(Процессор);
	
	Возврат Результат;
КонецФункции

Процедура СкопироватьОтборКомпоновкиДанных(ГруппаПриемник, ГруппаИсточник) 
	
	КоллекцияИсточник = ГруппаИсточник.Элементы;
	КоллекцияПриемник = ГруппаПриемник.Элементы;
	Для Каждого Элемент Из КоллекцияИсточник Цикл
		ТипЭлемента  = ТипЗнч(Элемент);
		НовыйЭлемент = КоллекцияПриемник.Добавить(ТипЭлемента);
		
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		Если ТипЭлемента = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьОтборКомпоновкиДанных(НовыйЭлемент, Элемент) 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДляУдаленияВидимыеВТаблице(Команда)
	СписокСсылок = ДляУдаленияВидимыеВТаблицеНаСервере();  
	СписокСсылокДляУдаления = Новый Массив;
	Для каждого Ссылка из СписокСсылок цикл
		Если Элементы.рфДинСписок.ПроверитьСтроку(Ссылка) тогда
			СписокСсылокДляУдаления.Добавить(Ссылка);
		КонецЕсли;  
	КонецЦикла;
	
	ДляУдаленияВидимыеВТаблицеНаСервере_Ссылки(СписокСсылокДляУдаления);
	
	ПослеВыбораОбъектовДляУдаления();
	
КонецПроцедуры

&НаКлиенте
Процедура ДляУдаленияВсеИзТаблицы(Команда)
	ДляУдаленияВсеИзТаблицыНаСервере();
	ПослеВыбораОбъектовДляУдаления();
КонецПроцедуры

&НаКлиенте
Процедура ДляУдаленияВыделенныеСтроки(Команда)
	ДляУдаленияВыделенныеСтрокиНаСервере();
	ПослеВыбораОбъектовДляУдаления();
КонецПроцедуры

&НаКлиенте
Процедура СамоУдалениеУдалитВТранзакции(Команда)
	СчетчикУдаленных = СамоУдалениеУдалитВТранзакцииНаСервере();
	ПоказатьЗначение(, "Удалено: " + Строка(СчетчикУдаленных) + ".");    
	Элементы.рфУдалениеСписок.Обновить();
КонецПроцедуры

///////////////////////////////////////////
//Выбор объектов для удаления  +++
///////////////////////////////////////////

&НаСервере
Процедура ДляУдаленияВсеИзТаблицыНаСервере()
	
	Данные = ТекущиеДанныеДинамическогоСписка(рфДинСписок);
	Если Данные.Колонки.Найти("Ссылка") = Неопределено тогда
		Сообщить("Нет колонки ссылка.");
		Возврат;
	КонецЕсли;
	
	рфОбъектыДляУдаления.Очистить();
	
	Для каждого стр из Данные цикл 
		СтрУд = рфОбъектыДляУдаления.Добавить();
		СтрУд.Ссылка = стр.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДляУдаленияВыделенныеСтрокиНаСервере()  
	
	рфОбъектыДляУдаления.Очистить();
	
	Объекты = Элементы.рфДинСписок.ВыделенныеСтроки;
	Для каждого Об из Объекты цикл
		СтрУд = рфОбъектыДляУдаления.Добавить();
		СтрУд.Ссылка = Об;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДляУдаленияВидимыеВТаблицеНаСервере()
	
	Данные = ТекущиеДанныеДинамическогоСписка(рфДинСписок);
	Если Данные.Колонки.Найти("Ссылка") = Неопределено тогда
		Сообщить("Нет колонки ссылка.");
		Возврат Новый Массив;
	КонецЕсли;    
	
	Возврат Данные.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ДляУдаленияВидимыеВТаблицеНаСервере_Ссылки(СписокСсылок)
	
	рфОбъектыДляУдаления.Очистить();
	
	Для каждого Об из СписокСсылок цикл
		СтрУд = рфОбъектыДляУдаления.Добавить();
		СтрУд.Ссылка = Об;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СамоУдалениеУдалитВТранзакцииНаСервере() 
	
	НачатьТранзакцию();     
	СчетчикУдаленных = 0;
	Для каждого стрТз из рфОбъектыДляУдаления цикл
		Об = стрТз.Ссылка.ПолучитьОбъект();
		Об.ОбменДанными.Загрузка = Истина;
		Об.Удалить(); 
		СчетчикУдаленных = СчетчикУдаленных + 1;
	КонецЦикла;
	ЗафиксироватьТранзакцию();    
	
	Возврат СчетчикУдаленных;
	
КонецФункции


&НаКлиенте
Процедура ПослеВыбораОбъектовДляУдаления()  
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаУдаление;
	ЗапускГенерацияДинСписка("рфУдалениеСписок");
	ОтборСпискаУдаления();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпискаУдаления()   
	
	
	Отбор = рфУдалениеСписок.КомпоновщикНастроек.Настройки.Отбор.Элементы;

	Отбор.Очистить();
	
	ЭлементОтбора = Отбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ПолучитьОбъектыДляУдаления();    
	
	
	
	рфУдалениеСписок.КомпоновщикНастроек.ЗагрузитьНастройки(рфУдалениеСписок.КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

Функция ПолучитьОбъектыДляУдаления()
	Возврат РеквизитФормыВЗначение("рфОбъектыДляУдаления").ВыгрузитьКолонку("Ссылка");	
КонецФункции

&НаСервере
Процедура СамоЗаписатьОбъектыНаСервере()

	НачатьТранзакцию();     

	Для каждого стрТз из рфОбъектыДляУдаления цикл
		Об = стрТз.Ссылка.ПолучитьОбъект();
		Об.Записать(); 
	КонецЦикла;     
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура СамоЗаписатьОбъекты(Команда)
	СамоЗаписатьОбъектыНаСервере();
КонецПроцедуры

///////////////////////////////////////////
// --- Выбор объектов для удаления
///////////////////////////////////////////
