&НаКлиенте 
Перем глобал_СтараяСтрокаЗапроса;

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ПутьКФормам = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя() + ".Форма";    
	
	Элементы.рфПараметрыЭтоКод.Подсказка = "Имя переменной - имя параметра. Обращатся по имени параметра. По умолчанию значение неопределено.";
	Элементы.рфПараметрыЭтоКод.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	РфОграничениеПоВыводу = 500;
	рфДопДанныеДляСохранения = Новый Структура("ФормыДляОткрытия", Новый Массив);

	//Писать в ПриСозданииНаСервере_ПослеОткрытия
	//Форма может закрыться, если открыта не программно.
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере_ПослеОткрытия()
	
	ПрочитатьИзМакетаЦвета();
	ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ФормаКнопкаВыбораБазы.Заголовок = Метаданные.Имя + " " + Метаданные.Версия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 
	
	Если ЗавершениеРаботы тогда
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	Если ЗавершениеНеПрограммное() тогда
		Возврат;
	КонецЕсли;
	СохраняюТекущийЗапрос(Элементы.СписокЗапросов.ТекущаяСтрока);
	
	СохранитьДанныеВФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ПереоткрытиеПрограммно() тогда
		Возврат;		
	КонецЕсли;
	
	WSS=Новый COMОбъект("WScript.Shell");
	РабочийСтолПуть=WSS.SpecialFolders().Item("Desktop");
	Объект.РабочийСтол=РабочийСтолПуть+"/1с83.sql";
	
	ПроверкаФайла = Новый Файл(Объект.РабочийСтол);
	ПроверкаФайла.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПриОткрытии_НачатьПроверкуСуществования_Продолжение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии_НачатьПроверкуСуществования_Продолжение(Существует, ДополнительныеПараметры) Экспорт
	
	СохраненныйТекст = "";
	Если Существует тогда
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(Объект.РабочийСтол, КодировкаТекста.UTF8);   
			СохраненныйТекст = ЧтениеТекста.Прочитать(); 
			ЧтениеТекста.Закрыть();
		Исключение	
		КонецПопытки;
	КонецЕсли;
	
	ПриОткрытии_ЗагрузкаСохраненногоЗапроса(СохраненныйТекст);
	
	
	рфПараметрыФормы = Новый Структура("ВремяПоследнегоСохранения"); 
	рфПараметрыФормы.Вставить("Заголовок",ЭтаФорма.Заголовок);
	рфПараметрыФормы.ВремяПоследнегоСохранения = ТекущаяДата();
	
	ПодключитьОбработчикОжидания("ОбработчикОбновитьСохранение",5,Ложь); 
	
	Для каждого ДанныеПоФормеДляОткрытия из рфДопДанныеДляСохранения.ФормыДляОткрытия цикл  
		ПараметрыОткрытия = Новый Структура();
		Если ДанныеПоФормеДляОткрытия.Ключ <> Неопределено И НЕ ДанныеПоФормеДляОткрытия.Ключ.Пустая() тогда
			ПараметрыОткрытия.Вставить("Ключ",ДанныеПоФормеДляОткрытия.Ключ);	
		КонецЕсли;
		Попытка
			ОткрытьФорму(ДанныеПоФормеДляОткрытия.ИмяФормыДляОткрытия, ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.Независимый);	
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить("Не получилось открыть: """ + ДанныеПоФормеДляОткрытия.ИмяФормыДляОткрытия +""".");
		КонецПопытки;
	КонецЦикла;
	
	Если НачалоДня(ТекущаяДата()) = Дата(2023,2,25) тогда //2023_02_26
		ОткрытьЗаполнениеРегистров_ПоОтбору(Неопределено);
		ЭтаФорма.Закрыть();
	КонецЕсли; 
	
	ПриСозданииНаСервере_ПослеОткрытия();
	
КонецПроцедуры

#КонецОбласти //СобытияФормы

#Область ОбещанияОповещения

&НаКлиенте
Процедура ЗакрытьФорму() ЭКСПОРТ
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсе() ЭКСПОРТ
	
	текИд=Элементы.СписокЗапросов.ТекущаяСтрока;  
	Если глобал_СтараяСтрокаЗапроса = текИд тогда
		Возврат;
	КонецЕсли;
	ОбновитьВсеСервер(текИд,глобал_СтараяСтрокаЗапроса);
	глобал_СтараяСтрокаЗапроса=текИд;
	
КонецПроцедуры

#КонецОбласти //ОбещанияОповещения

#Область Команды

&НаКлиенте
Процедура _Выполнить(Команда)
	
	__Выполнить(пТипВыполнения_ОбычныйЗапрос());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйТекстЗапроса(Текст,ДополнительныеПараметры) ЭКСПОРТ
	Если Текст=Неопределено тогда
		Возврат;
	КонецЕсли;
	рфТекстЗапроса.УстановитьТекст(Текст);
КонецПроцедуры

&НаКлиенте
Процедура КонструкторЗапроса(Команда)
	ТекстЗапроса=рфТекстЗапроса.ПолучитьТекст();
	Если ПустаяСтрока(ТекстЗапроса) тогда
		Кон=Новый КонструкторЗапроса();	
	Иначе
		Кон=Новый КонструкторЗапроса(ТекстЗапроса);
	КонецЕсли;
	Кон.Показать(Новый ОписаниеОповещения("ВыбранныйТекстЗапроса",ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметры(Команда)
	ОбновляюПараметры();
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьТипВручную(Команда)
	Элементы.рфПараметрыЗначение.ВыбиратьТип=НЕ Элементы.рфПараметрыЗначение.ВыбиратьТип;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакетно(Команда)
	
	__Выполнить(пТипВыполнения_ВыполнитьПакетно());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьТипПрограммно(Команда) 
	Если Элементы.рфПараметры.ТекущиеДанные = Неопределено тогда
		Сообщить("Не выбрана строка параметр.");
		Возврат;
	КонецЕсли;     
	СтруктураПараметров = Новый Структура();
	ОткрытьФорму(Объект.ПутьКФормам+".ФормаВыбораТипа", СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполнениеРегистров(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".ЗаполнениеРегистров_Форма",,, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура РИБ(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".РИБ", ,,,,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура УдалениеОбъектов(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".УдалениеОбъектов",,,Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура РазобратьЗапрос(Команда) 
	
	__Выполнить(пТипВыполнения_РазборЗапроса());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполнениеРегистров_ПоОтбору(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".ЗаполнениеРегистров_ПоОтбору",,, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаполнениеРегистров_ПоНабору(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".ЗаполнениеРегистров_ПоНабору", ,, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКодОтладкиЗапроса(Команда)
	
	ТекстОтладки = ПолучитьТекстОтладкиЗапроса();
	лТекстовыйДокумент = Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст(ТекстОтладки);
	лТекстовыйДокумент.Показать(Строка(ТекущаяДата()));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКодОтладкиЗапросаЗначениеВнут(Команда) 
	
	
	лТекстовыйДокумент = Новый ТекстовыйДокумент;
	лТекстовыйДокумент.УстановитьТекст("ЗначениеВСтрокуВнутр(Новый Структура(""Текст,Параметры"",Запрос.Текст, Запрос.Параметры));");
	лТекстовыйДокумент.Показать(Строка(ТекущаяДата()));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросИзXml(Команда)
	
	ЗагрузитьЗапросИзXml_Сервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапросИзСтрВнут(Команда)
	ЗагрузитьЗапросИзСтрВнут_Сервер();
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьДляКода(Команда)
	ИсходныйТекст = рфТекстЗапроса.ПолучитьТекст();
	ИсходныйТекст = СтрЗаменить(ИсходныйТекст,"""","""""");
	ИсходныйТекст = СтрЗаменить(ИсходныйТекст,Символы.ПС,Символы.ПС+"|");
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(ИсходныйТекст);
	ТекстДок.Показать(Формат(ТекущаяДата(),"ДЛФ=T"));
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьИзКода(Команда)
	ИсходныйТекст = рфТекстЗапроса.ПолучитьТекст();
	ИсходныйТекст = СтрЗаменить(ИсходныйТекст, """""", """");
	ИсходныйТекст = СтрЗаменить(ИсходныйТекст,Символы.ПС+"|",Символы.ПС);
	рфТекстЗапроса.УстановитьТекст(ИсходныйТекст);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегистрациюВПланеОбмена(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".ПланыОбменаРегистрация", ,, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОткрытияФормПриЗапуске(Команда)  
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("рфДопДанныеДляСохранения_АдресВХ", ПоместитьВоВременноеХранилище(рфДопДанныеДляСохранения.ФормыДляОткрытия, ЭтаФорма.УникальныйИдентификатор));
	ОткрытьФорму(Объект.ПутьКФормам+".НастройкаОткрытияФормПриЗапуске", ПараметрыОткрытия, ЭтаФорма, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегламентныеЗадания(Команда)
	ОткрытьФорму(Объект.ПутьКФормам+".РегламентныеИФоновыеЗадания", ,, Новый УникальныйИдентификатор(),,,,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрУстановитьСписокЗначений(Команда)
	
	Если Элементы.рфПараметры.ТекущаяСтрока = Неопределено тогда
		Сообщить("Не выбрана строка параметр.");
		Возврат;
	КонецЕсли;
	
	УстановитьВПараметрСписокЗначений(Элементы.рфПараметры.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЛишниеПараметры(Команда)
	УдалитьЛишниеПараметрыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовДобавитьДочерний(Команда)
	
	РодительскаяСтрока = Элементы.СписокЗапросов.ТекущиеДанные;
	Если РодительскаяСтрока = Неопределено тогда
		РодительскаяСтрока = рфСписокЗапросов;
	КонецЕсли;          
	РодительскаяСтрока.ПолучитьЭлементы().Добавить();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыбораБазы(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	Для каждого стр из рфСохраненныеБазы цикл
		СписокЗначений.Добавить(Стр.СтрокаСоединенияИнформационнойБазы, Стр.СтрокаСоединенияИнформационнойБазы + "_" + Стр.Версия);		
	КонецЦикла;
	ОП = Новый ОписаниеОповещения("ОписаниеОповещенияВыборЗапросовДругойБазы", ЭтотОбъект);	
	ПоказатьВыборИзМеню(ОП, СписокЗначений, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти //Команды

#Область СобытиеЭлементов

&НаКлиенте
Процедура рфПараметрыТипПриИзменении(Элемент)
	Стр=Элементы.рфПараметры.ТекущиеДанные;
	Если Стр=Неопределено тогда
		Возврат;
	КонецЕсли;
	ц=Стр.тип.ПривестиЗначение();
	Стр.Значение=ц;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбновитьВсе",0.01,Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина; 
	
	Если Копирование тогда
		ПрошлыйЗапрос = Элементы.СписокЗапросов.ТекущиеДанные;
		РодительСтр = ПрошлыйЗапрос.ПолучитьРодителя();
		Если РодительСтр = Неопределено тогда
			РодительСтр = рфСписокЗапросов;
		КонецЕсли;    
		РодЭлементы = РодительСтр.ПолучитьЭлементы();
		ИндексПрошлого = РодЭлементы.Индекс(ПрошлыйЗапрос)+1;
		Стр=РодЭлементы.Вставить(ИндексПрошлого);
	Иначе
		Стр=рфСписокЗапросов.ПолучитьЭлементы().Добавить();	
	КонецЕсли;
	
	//Стр.GUID_Параметры = Новый УникальныйИдентификатор();
	//Стр.GUID_ТабДок = Новый УникальныйИдентификатор();
	//Стр.Хранилище_Параметры=Новый Массив;
	
	Если Копирование тогда	
		
		СохраняюТекущийЗапрос(Элементы.СписокЗапросов.ТекущаяСтрока);  
		
		Стр.Имя=ПрошлыйЗапрос.Имя+"(*)";
		Стр.текстЗапроса=ПрошлыйЗапрос.текстЗапроса;
		Для каждого ПрошлыйПараметр из ПрошлыйЗапрос.Параметры цикл
			ТекПар = Стр.Параметры.Добавить();	 
			ЗаполнитьЗначенияСвойств(ТекПар, ПрошлыйПараметр);
		КонецЦикла;
		
		//Если ЭтоАдресВременногоХранилища(ПрошлыйЗапрос.Хранилище_Параметры) тогда
		//	массивПар=ПолучитьИзВременногоХранилища(ПрошлыйЗапрос.Хранилище_Параметры);
		//	рфПараметры.Очистить();
		//	Для каждого ДанныеОПараметрах из массивПар цикл
		//		лС=рфПараметры.Добавить();
		//		//лС.Имя=ДанныеОПараметрах.Имя;
		//		//лС.Тип=ДанныеОПараметрах.Тип;
		//		//лС.Значение=ДанныеОПараметрах.Значение;
		//		//лС.ЭтоКод=ДанныеОПараметрах.ЭтоКод;
		//		ЗаполнитьЗначенияСвойств(лС, ДанныеОПараметрах);
		//		Если лС.ЭтоТаблица тогда
		//			//реквизит	
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		//Стр.Хранилище_Параметры = ПоместитьВоВременноеХранилище(массивПар,Стр.GUID_Параметры);//ПоместитьВоВременноеХранилище(Стр.GUID_Параметры,массивПар);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура рфТабДокВыбор(Элемент, Область, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если Область.СодержитЗначение тогда
		ПоказатьЗначение(,Область.Значение);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура рфПараметрыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеСтроки = рфПараметры.НайтиПоИдентификатору(Элементы.рфПараметры.ТекущаяСтрока);
	Если ДанныеСтроки.ЭтоКод тогда
		СтандартнаяОбработка = Ложь; 
		Структура = ТекущиеДанныеВыборКода();
		СтруктураПараметров = Новый Структура("ДанныеСтроки,ИдСтроки", Структура, Элементы.рфПараметры.ТекущаяСтрока);
		ОткрытьФорму(Объект.ПутьКФормам+".ФормаКода", СтруктураПараметров,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
	ИначеЕсли ДанныеСтроки.ЭтоТаблица тогда
		СтандартнаяОбработка = Ложь;   
		СтруктураПараметров = Новый Структура();  
		Если ЗначениеЗаполнено(ДанныеСтроки.Значение) И ТипЗнч(ДанныеСтроки.Значение) = Тип("Строка") тогда
			ИмяТЗ = Строка(ДанныеСтроки.Значение);
		Иначе
			ИмяТЗ = "тз_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","");	
		КонецЕсли;                  
		ДанныеСтроки.Значение = ИмяТЗ;
		СтруктураПараметров.Вставить("ИмяТЗ", ИмяТЗ);
		СтруктураПараметров.Вставить("ТЗ_Хранилище", ПоместитьТЗВоВременноеХранилище(ДанныеСтроки.Значение));
		СтруктураПараметров.Вставить("ИдФормы", ЭтаФорма.УникальныйИдентификатор);
		СтруктураПараметров.Вставить("ИдСтроки", Элементы.рфПараметры.ТекущаяСтрока);
		ОткрытьФорму(Объект.ПутьКФормам+".ФормаТаблицы", СтруктураПараметров,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
		
	ИначеЕсли ДанныеСтроки.Тип.Типы().Количество() > 1 тогда 
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ДанныеСтроки.Тип.Типы());
		ДопПар = Новый Структура();
		ДопПар.Вставить("СтрТЗ", ДанныеСтроки);
		Оп_ВыборТипа = Новый ОписаниеОповещения("ОП_ПараметрВыборМногосоставногоТипа", ЭтотОбъект, ДопПар);
		ПоказатьВыборИзСписка(Оп_ВыборТипа, СписокЗначений, , СписокЗначений[0])	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура рфПараметрыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") тогда
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = рфПараметры.НайтиПоИдентификатору(ВыбранноеЗначение.ИдСтроки);
		Если ДанныеСтроки.ЭтоКод тогда
			ДанныеСтроки.Значение = ВыбранноеЗначение.Значение;
		ИначеЕсли ДанныеСтроки.ЭтоТаблица тогда
			ЗагрузитьТаблицуВПараметр(ДанныеСтроки.Значение, ВыбранноеЗначение.АдресТЗ);		
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)  
	
	Если СтрЗаканчиваетсяНа(ИсточникВыбора.ИмяФормы,".ФормаВыбораТипа") И Элементы.рфПараметры.ТекущиеДанные<>Неопределено тогда 
		
		ИменаТипов = ВыбранноеЗначение.ИменаТипов;                
		СписокТипов = СтрСоединить(ИменаТипов, ",");
		Элементы.рфПараметры.ТекущиеДанные.Тип = Новый ОписаниеТипов(СписокТипов);
		
		Если ВыбранноеЗначение.ЭтоНуженСписокЗначений тогда
			Элементы.рфПараметры.ТекущиеДанные.Значение = Новый СписокЗначений;
			Элементы.рфПараметры.ТекущиеДанные.Значение.ТипЗначения	= Новый ОписаниеТипов(СписокТипов); 
		Иначе
			Элементы.рфПараметры.ТекущиеДанные.Значение = Элементы.рфПараметры.ТекущиеДанные.Тип.ПривестиЗначение();
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(ИсточникВыбора.ИмяФормы,".НастройкаОткрытияФормПриЗапуске") тогда	
		рфДопДанныеДляСохранения.ФормыДляОткрытия = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //СобытиеЭлементов

#Область ОбработчикиОжидания

&НаКлиенте
Процедура ОбработчикОбновитьСохранение() Экспорт       
	Секунды = ТекущаяДата() - рфПараметрыФормы.ВремяПоследнегоСохранения; 
	ЭтаФорма.Заголовок = рфПараметрыФормы.Заголовок + Строка(Секунды);		
КонецПроцедуры

&НаКлиенте
Процедура ОП_ПараметрВыборМногосоставногоТипа(ВыбранныйЭлемент, ДопПар) Экспорт
	Если ВыбранныйЭлемент = Неопределено тогда
		Возврат;
	КонецЕсли;
	Тип = ВыбранныйЭлемент.Значение; 
	СтрТЗ = ДопПар.СтрТЗ;	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);   
	СтрТЗ.Значение = ОписаниеТипов.ПривестиЗначение(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыборЗапросовДругойБазы(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти //ОбработчикиОжидания

&НаКлиенте
Процедура __Выполнить(ТипВыполнения)
	
	ДопДанные = СохраняюТекущийЗапрос(Элементы.СписокЗапросов.ТекущаяСтрока);
	
	ВыполнитьНаСервере(Элементы.СписокЗапросов.ТекущаяСтрока, ТипВыполнения );
	
	Если ДопДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если ДопДанные.НужноСохранитьВФайл тогда
		СохранитьДанныеВФайл();	
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьНаСервере(ИдСтроки, ТипВыполнения)
	
	ТабДок = рфТабДок;  
	ТабДок.ФиксацияСверху = 1;
	Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() ИЛИ ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
		ТабДок.ФиксацияСверху = 0;	
	КонецЕсли;
	ТабДок.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ТЗ_ВыполняемыеЗапросы = Новый ТаблицаЗначений;
	ТЗ_ВыполняемыеЗапросы.Колонки.Добавить("ТекстЗапроса");
	ТЗ_ВыполняемыеЗапросы.Колонки.Добавить("ТЗ_Параметры");
	ТЗ_ВыполняемыеЗапросы.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ТЗ_ВыполняемыеЗапросы.Колонки.Добавить("ИндексВывода", Новый ОписаниеТипов("Число"));
	ТЗ_ВыполняемыеЗапросы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	СтрТЗ_Запрос = ?(ИдСтроки = Неопределено, Неопределено, рфСписокЗапросов.НайтиПоИдентификатору(ИдСтроки));
	Если СтрТЗ_Запрос = Неопределено ИЛИ СтрТЗ_Запрос.Порядок = 0 тогда         
		СтрВыпЗапрос = ТЗ_ВыполняемыеЗапросы.Добавить();
		СтрВыпЗапрос.ТекстЗапроса = рфТекстЗапроса.ПолучитьТекст();
		СтрВыпЗапрос.ТЗ_Параметры = рфПараметры;
	Иначе
		Для Счетчик = 0 по рфСписокЗапросов.Количество()-1 цикл  
			стрЗапрос = рфСписокЗапросов[Счетчик];
			Если стрЗапрос.Порядок <> СтрТЗ_Запрос.Порядок тогда
				Продолжить;
			КонецЕсли;
			СтрВыпЗапрос = ТЗ_ВыполняемыеЗапросы.Добавить();
			СтрВыпЗапрос.Порядок = стрЗапрос.Порядок;
			СтрВыпЗапрос.ТекстЗапроса = стрЗапрос.текстЗапроса;
			СтрВыпЗапрос.ТЗ_Параметры = стрЗапрос.Параметры;
			СтрВыпЗапрос.ИндексВывода = Счетчик; 
			СтрВыпЗапрос.Имя = стрЗапрос.Имя;
		КонецЦикла;
		
	КонецЕсли;
	
	ТЗ_ВыполняемыеЗапросы.Сортировать("Порядок, ИндексВывода");
	
	ТабДок.НачатьАвтогруппировкуСтрок();   
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	РазделительЗапросов = Макет.ПолучитьОбласть("РазделительЗапросов");
	
	Для каждого стр из ТЗ_ВыполняемыеЗапросы цикл
		Если ТЗ_ВыполняемыеЗапросы.Количество() > 1 тогда
			РазделительЗапросов.Параметры.Имя = стр.Имя;
			ТабДок.Вывести(РазделительЗапросов, 1);
		КонецЕсли;
		ТабДокЗапрос = ВыполнитьНаСервереОтдельныйЗапрос(стр.ТекстЗапроса, Стр.ТЗ_Параметры, ТипВыполнения, МенеджерВременныхТаблиц); 
		ТабДок.Вывести(ТабДокЗапрос, 2);
	КонецЦикла;
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

Функция ВыполнитьНаСервереОтдельныйЗапрос(ТекстЗапроса, ТЗ_Параметры, ТипВыполнения, МенеджерВременныхТаблиц)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	лСуществующиеРеквизиты = ПолучитьРеквизиты();
	Для каждого ДанныеПоПар из ТЗ_Параметры цикл
		Если ДанныеПоПар.ЭтоКод тогда 
			лЗнчПар = ПолучитьЗначениеЭкспортногоПараметра(ДанныеПоПар);
		ИначеЕсли ДанныеПоПар.ЭтоТаблица тогда    
			лРеквизитНайден = Ложь;
			Для каждого ДанныеПоРеквизиту из лСуществующиеРеквизиты цикл
				Если ДанныеПоРеквизиту.Имя = ДанныеПоПар.Значение тогда
					лРеквизитНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;      
			Если лРеквизитНайден тогда
				лЗнчПар = РеквизитФормыВЗначение(ДанныеПоПар.Значение);	
			Иначе
				сообщить("Не найдена таблица: " + ДанныеПоПар.Значение + ". Запрос отменен.");
				Возврат ТабДок;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДанныеПоПар.Значение) = Тип("ОписаниеТипов") тогда
			Если ДанныеПоПар.Значение.Типы().Количество()<>1 тогда
				ВызватьИсключение "Параметр: " + ДанныеПоПар.Имя + " не содержит типов.";
			КонецЕсли;   
			лЗнчПар = ДанныеПоПар.Значение.Типы()[0];
		Иначе
			лЗнчПар = ДанныеПоПар.Значение;				
		КонецЕсли;
		Запрос.Параметры.Вставить(ДанныеПоПар.Имя,лЗнчПар);		
	КонецЦикла; 
	
	
	Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() тогда  
		СписокПакетов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	ИначеЕсли ТипВыполнения = пТипВыполнения_ОбычныйЗапрос() тогда  
		СписокПакетов = Новый Массив;       
		СписокПакетов.Добавить(Запрос.Выполнить());
	ИначеЕсли ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
		//Ничего
	Иначе 
		ВызватьИсключение "Невозможная ошибка.";
	КонецЕсли;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	Ячейка = Макет.ПолучитьОбласть("Ячейка");
	ОбластьРазделительПакетов = Макет.ПолучитьОбласть("ОбластьРазделительПакетов");
	
	
	#Область ВыводДопИнформацииПоЗапросу
	
	Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	КонецЕсли;
	
	#КонецОбласти //ВыводДопИнформацииПоЗапросу	
	
	Если ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
		ДанныеДляВывода = РазобратьЗапросИВывести(МенеджерВременныхТаблиц, Запрос, ТабДок, Ячейка);
		СписокПакетов = ДанныеДляВывода.РезультатыЗапросов;
	КонецЕсли;
	
	ЗаКонецПрошлогоЗапроса_НомерСтроки= 1;
	
	Для СчетчикЗапросов = 0 по СписокПакетов.Количество()-1 цикл 
		
		РезультатЗапроса = СписокПакетов[СчетчикЗапросов]; 
		
		Если РезультатЗапроса = Неопределено тогда  
			Ячейка.Параметры.Ячейка = "Удаление вт.";
			ТабДок.Вывести(Ячейка);
			Если СчетчикЗапросов <> СписокПакетов.Количество()-1 тогда
				ВывестиРазделительЗапросов(ЗаКонецПрошлогоЗапроса_НомерСтроки, ТабДок, ОбластьРазделительПакетов, Неопределено); //ТабДок.Вывести(ОбластьРазделительПакетов);	
			КонецЕсли;	
			Продолжить;	
		КонецЕсли;
		
		Колонки=РезультатЗапроса.Колонки;
		КолКолонок= Колонки.Количество()-1;
		
		КолонкиХранилищеЗначения = Новый Соответствие;
		Для счетчик=0 по КолКолонок Цикл
			Ячейка.Параметры.Ячейка=Колонки[счетчик].Имя;     
			
			Если Колонки[счетчик].ТипЗначения.Типы().Найти(Тип("ХранилищеЗначения")) <> Неопределено тогда
				Ячейка.Параметры.Ячейка = "ХранЗнч___" + Ячейка.Параметры.Ячейка;
				КолонкиХранилищеЗначения.Вставить(счетчик, Истина);
			КонецЕсли;
			
			Если счетчик=0 Тогда
				ВыведеннаяОбласть = ТабДок.Вывести(Ячейка); 
				Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() ИЛИ ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
					ЭтоПакетно_Начало_ВыводаТекста = ВыведеннаяОбласть.Верх + 1;	
				КонецЕсли;
			Иначе
				ТабДок.Присоединить(Ячейка);
			КонецЕсли; 
		КонецЦикла; 
		
		#Область ВыводДопИнформацииПоЗапросу
		
		Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() тогда 
			ТекСхемаЗапроса = СхемаЗапроса.ПакетЗапросов[СчетчикЗапросов]; 
			Ячейка.Параметры.Ячейка = ?(ПустаяСтрока(ТекСхемаЗапроса.ТаблицаДляПомещения),"", "Поместить " + ТекСхемаЗапроса.ТаблицаДляПомещения + ""); 
			ВыведеннаяОбласть = ТабДок.Присоединить(Ячейка); 
			Если НЕ ПустаяСтрока(ТекСхемаЗапроса.ТаблицаДляПомещения) тогда
				ВыведеннаяОбласть.ЦветФона = WebЦвета.СветлоЗеленый;				
			КонецЕсли;    
			ЭтоПакетно_Колонка = ВыведеннаяОбласть.Лево; 
		ИначеЕсли ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
			ТекСхемаЗапроса = ДанныеДляВывода.СписокЗапросов[СчетчикЗапросов].ТекСхема;
			Ячейка.Параметры.Ячейка = ?(ПустаяСтрока(ТекСхемаЗапроса.ТаблицаДляПомещения),"", "Поместить " + ТекСхемаЗапроса.ТаблицаДляПомещения + ""); 
			ВыведеннаяОбласть = ТабДок.Присоединить(Ячейка);
			Если НЕ ПустаяСтрока(ТекСхемаЗапроса.ТаблицаДляПомещения) тогда
				ВыведеннаяОбласть.ЦветФона = WebЦвета.СветлоЗеленый;				
			КонецЕсли;
			ЭтоПакетно_Колонка = ВыведеннаяОбласть.Лево;  
			
			Ячейка.Параметры.Ячейка = "Используемые таблицы:";
			ВыведеннаяОбласть = ТабДок.Присоединить(Ячейка);
			ИменаИспользуемыхТаблиц_Колонка = ВыведеннаяОбласть.Лево; 
			
			Ячейка.Параметры.Ячейка = "Типы колонок:";
			ВыведеннаяОбласть = ТабДок.Присоединить(Ячейка);
			ТипыКолонок_Колонка = ВыведеннаяОбласть.Лево; 
		КонецЕсли;
		
		#КонецОбласти //ВыводДопИнформацииПоЗапросу	
		
		
		Выборка=РезультатЗапроса.Выбрать(); 
		СчетчикВывода = 0;
		Пока Выборка.Следующий() Цикл
			Для счетчик=0 по КолКолонок Цикл
				ИмяКолонки=Колонки[счетчик].Имя;
				
				Если КолонкиХранилищеЗначения[счетчик] <> Неопределено тогда
					СодержимоеХранилища = Выборка[Колонки[счетчик].Имя].Получить();
					Запись = Новый ЗаписьXML;
					Запись.УстановитьСтроку();
					СериализаторXDTO.ЗаписатьXML(Запись, СодержимоеХранилища);
					Ячейка.Параметры.Ячейка = Запись.Закрыть();
				Иначе
					Ячейка.Параметры.Ячейка = Выборка[Колонки[счетчик].Имя];	
				КонецЕсли;
				
				Если счетчик=0 Тогда
					ТабДок.Вывести(Ячейка);
				Иначе
					ТабДок.Присоединить(Ячейка);
				КонецЕсли;					
			КонецЦикла;
			СчетчикВывода = СчетчикВывода + 1;
			Если РфОграничениеПоВыводу <> 0 И СчетчикВывода >= РфОграничениеПоВыводу тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;  
		
		Если ТипВыполнения = пТипВыполнения_ВыполнитьПакетно() ИЛИ ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда 
			лТекстЗапроса = ТекСхемаЗапроса.ПолучитьТекстЗапроса();
			ЖелаемоеКоличествоСтрок = СтрЧислоСтрок(лТекстЗапроса);
			
			//////////////////////////////////////
			///////// Ограничение на вывод ///////
			//////////////////////////////////////
			
			Если ЖелаемоеКоличествоСтрок - СчетчикВывода > 30 тогда
				ЖелаемоеКоличествоСтрок = СчетчикВывода + 30;
			КонецЕсли;
			
			//////////////////////////////////////
			//////////////////////////////////////
			//////////////////////////////////////
			
			НужноДобавить = ЖелаемоеКоличествоСтрок - СчетчикВывода;//Выборка.Количество();
			
			Для лСчетчик = 1 по НужноДобавить цикл
				Ячейка.Параметры.Ячейка = "----";
				ТабДок.Вывести(Ячейка);
			КонецЦикла;           
			ЭтоПакетно_Конец_ВыводаТекста = ЭтоПакетно_Начало_ВыводаТекста + ( Макс(ЖелаемоеКоличествоСтрок,СчетчикВывода) -1 );
			ОбластьТекстЗапроса = ТабДок.Область(ЭтоПакетно_Начало_ВыводаТекста,ЭтоПакетно_Колонка,ЭтоПакетно_Конец_ВыводаТекста,ЭтоПакетно_Колонка);
			ОбластьТекстЗапроса.Объединить();
			ОбластьТекстЗапроса.Текст = лТекстЗапроса; 
			ОбластьТекстЗапроса.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
			ОбластьТекстЗапроса.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
			
			Если ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда  
				счетчикТаблиц = 0; 
				СписокИменТаблиц = ДанныеДляВывода.СписокЗапросов[СчетчикЗапросов].ИменаТаблиц;
				Для НомерСтрокиИменаТаблиц = ЭтоПакетно_Начало_ВыводаТекста по ЭтоПакетно_Конец_ВыводаТекста цикл
					Если СписокИменТаблиц.Количество()<=счетчикТаблиц тогда
						Прервать;
					КонецЕсли;
					ТабДок.Область(НомерСтрокиИменаТаблиц,ИменаИспользуемыхТаблиц_Колонка).Текст = СписокИменТаблиц[счетчикТаблиц];
					счетчикТаблиц = счетчикТаблиц + 1;
				КонецЦикла; 
				
				счетчикКолонок = 0;
				Для НомерСтрокиТипКолонки = ЭтоПакетно_Начало_ВыводаТекста по ЭтоПакетно_Конец_ВыводаТекста цикл
					Если ТекСхемаЗапроса.Колонки.Количество()<=счетчикКолонок тогда
						Прервать;
					КонецЕсли;
					лТекКолонка = ТекСхемаЗапроса.Колонки[счетчикКолонок];  
					ДоступныеТипыМассив = Новый Массив;
					Для каждого ПотенцТип из лТекКолонка.ТипЗначения.Типы() цикл 
						
						МетаОб = Метаданные.НайтиПоТипу(ПотенцТип);	
						Если МетаОб = Неопределено тогда
							СтрТип = Строка(ПотенцТип);
						Иначе
							СтрТип = МетаОб.ПолноеИмя();	
						КонецЕсли;
						ДоступныеТипыМассив.Добавить(СтрТип);
					КонецЦикла;
					//ДоступныеТиры = СтрСоединить(лТекКолонка.ТипЗначения.Типы(),", "); 
					ДоступныеТиры = СтрСоединить(ДоступныеТипыМассив, ", ");	
					
					//ТекСхемаЗапроса.Колонки[счетчикКолонок].Псевдоним	
					ДопДанныеПоПолю = "";                              
					Для каждого ДанныеПоПолю из ДанныеДляВывода.ДанныеПоПолям цикл
						Если ДанныеПоПолю.ТаблицаДляПомещения = ТекСхемаЗапроса.ТаблицаДляПомещения И лТекКолонка.Псевдоним = ДанныеПоПолю.ПсевдонимПоля тогда
							ДопДанныеПоПолю = ДанныеПоПолю.ИсходныеДанные;	
						КонецЕсли;
					КонецЦикла;
					
					ИмяПолей = Новый Массив;
					Для каждого поле из лТекКолонка.Поля цикл
						ИмяПолей.Добавить(Строка(поле));	
					КонецЦикла;   
					ИмяПоля = СтрСоединить(  ИмяПолей  ,"/");
					ТабДок.Область(НомерСтрокиТипКолонки,ТипыКолонок_Колонка).Текст = ИмяПоля + " : " + ДоступныеТиры + " | " +ДопДанныеПоПолю;
					счетчикКолонок = счетчикКолонок + 1;	
				КонецЦикла;
				//ТипыКолонок_Колонка
				
			КонецЕсли;
		КонецЕсли;
		
		Если СчетчикЗапросов <> СписокПакетов.Количество()-1 тогда
			ВывестиРазделительЗапросов(ЗаКонецПрошлогоЗапроса_НомерСтроки, ТабДок, ОбластьРазделительПакетов, ЭтоПакетно_Колонка); //ТабДок.Вывести(ОбластьРазделительПакетов);	
		КонецЕсли;
		
	КонецЦикла;
	
	
	#Область НаименованиеВСпискеЗапросов
	
	ИдСтроки = Элементы.СписокЗапросов.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено тогда 
		ТекДанные = рфСписокЗапросов.НайтиПоИдентификатору(ИдСтроки);  
		Если ПустаяСтрока(ТекДанные.Имя) тогда
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
			
			ГенТекстИмяТаблиц = "";
			ОписаниеПоследней = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1]; 
			
			Для каждого Оператор из ОписаниеПоследней.Операторы цикл
				Для каждого ИсточникСхемыЗапроса из Оператор.Источники цикл
					ИстСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
					Если ТипЗнч(ИстСхемыЗапроса) = Тип("ТаблицаСхемыЗапроса") тогда
						ГенТекстИмяТаблиц = ГенТекстИмяТаблиц + ИстСхемыЗапроса.ИмяТаблицы + "/";	
					ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") тогда
						ГенТекстИмяТаблиц = ГенТекстИмяТаблиц + ".ВложенныйЗапросСхемыЗапроса." + "/";
					ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") тогда
						ГенТекстИмяТаблиц = ГенТекстИмяТаблиц + ИстСхемыЗапроса.ИмяТаблицы + "/";
					Иначе
						Сообщить("Невозможная ошибка. 2022_12_10__19_29 фикс.");	
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ТекДанные.Имя = Лев(ГенТекстИмяТаблиц,СтрДлина(ГенТекстИмяТаблиц)-1);
		КонецЕсли;	
	КонецЕсли;
	
	#КонецОбласти //НаименованиеВСпискеЗапросов
	
	//Для счетчик = 1 по ТабДок.ВысотаТаблицы цикл
	//	ТабДок.Область(счетчик, , счетчик).АвтоВысотаСтроки = Ложь;
	//	ТабДок.Область(счетчик, , счетчик).ВысотаСтроки = 12;
	//КонецЦикла;
	ТабДок.Область( , ,  ).АвтоВысотаСтроки = Ложь;
	ТабДок.Область( , ,  ).ВысотаСтроки = 12;
	
	Если ТипВыполнения = пТипВыполнения_РазборЗапроса() тогда
		
		ВывестиРазделительЗапросов(ЗаКонецПрошлогоЗапроса_НомерСтроки, ТабДок, ОбластьРазделительПакетов, ЭтоПакетно_Колонка); //ТабДок.Вывести(ОбластьРазделительПакетов);	
		
		АнализИсторииВт(ТабДок);
		
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция РазобратьЗапросИВывести(МенеджерВременныхТаблиц, ЗапросИсходный, ТабДок, Ячейка)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ЗапросИсходный.Текст);
	
	СписокЗапросов = Новый Массив;
	ДанныеПоПолям = Новый Массив;    
	
	Для каждого ЗапросВыбораСхемыЗапроса из СхемаЗапроса.ПакетЗапросов цикл  
		
		Если Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") = ТипЗнч(ЗапросВыбораСхемыЗапроса) тогда
			СписокЗапросов.Добавить(Новый Структура("ТекСхема,ЭтоУдаление,ИменаТаблиц",Неопределено,Истина,Неопределено));
			Продолжить;
		КонецЕсли;     
		
		
		Для каждого ДанныеПоКолонке из ЗапросВыбораСхемыЗапроса.Колонки цикл
			
			Для каждого ПолеСоединения из ДанныеПоКолонке.Поля цикл     
				
				Если ПолеСоединения = Неопределено тогда
					Продолжить;
				КонецЕсли;
				Если ПолеСоединения.СодержитАгрегатнуюФункцию() тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(Строка(ПолеСоединения),"(") <> 0 тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(Строка(ПолеСоединения)," ") <> 0 тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрНайти(Строка(ПолеСоединения),Символы.ПС) <> 0 тогда
					Продолжить;
				КонецЕсли;
				
				ТаблицаИмяПоля = СтрРазделить(Строка(ПолеСоединения),".",Ложь);
				
				ДанныеПоПолю = Новый Структура("ПсевдонимТаблицы,ИмяПоля,ПсевдонимПоля,ФизическаяТаблица,ПсевдонимФизическойТаблицы,ТаблицаДляПомещения,ИсходныеДанные");  
				ДанныеПоПолю.ИсходныеДанные = Неопределено;//Пока неизвестна
				ДанныеПоПолю.ТаблицаДляПомещения = Неопределено;//Пока неизвестна
				ДанныеПоПолю.ФизическаяТаблица = Неопределено;//Пока неизвестна 
				ДанныеПоПолю.ПсевдонимФизическойТаблицы = Неопределено;//Пока неизвестна 
				ДанныеПоПолю.ПсевдонимТаблицы = ТаблицаИмяПоля[0];	
				ДанныеПоПолю.ИмяПоля = Сред(Строка(ПолеСоединения),СтрДлина(ДанныеПоПолю.ПсевдонимТаблицы+".")+1);	
				ДанныеПоПолю.ПсевдонимПоля = ДанныеПоКолонке.Псевдоним;	
				ДанныеПоПолям.Добавить(ДанныеПоПолю);
			КонецЦикла;
			
		КонецЦикла;
		а=4;
		РекурсивноРазобратьЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, СписокЗапросов, ДанныеПоПолям);
		
	КонецЦикла;
	
	
	а=4;   
	//ПроверкаНаЗацикливание = 0;
	//Для каждого ДанныеПоПолю из ДанныеПоПолям цикл
	//	
	//	ИщуТаблицу = ДанныеПоПолю.ПсевдонимФизическойТаблицы;
	//	
	//	Если ИщуТаблицу = Неопределено тогда
	//		Продолжить;
	//	КонецЕсли;   
	//	
	//	ПоследняяНайденнаяСтрока = Неопределено;
	//	
	//	Пока Истина цикл 
	//		
	//		ПроверкаНаЗацикливание = ПроверкаНаЗацикливание + 1;
	//		Если ПроверкаНаЗацикливание > 10000 тогда
	//			Сообщить("Анализ полей зациклился. Отмен потенциально вечный цикл.");
	//			Прервать;
	//		КонецЕсли;
	//		
	//		ПоискЗакончился = Истина;		
	//		
	//		Для каждого ПоискПоле из ДанныеПоПолям цикл
	//			Если ИщуТаблицу = ПоискПоле.ТаблицаДляПомещения тогда   
	//				ПоследняяНайденнаяСтрока = ПоискПоле;
	//				ИщуТаблицу = ПоискПоле.ПсевдонимФизическойТаблицы;
	//				ПоискЗакончился = Ложь;
	//				Прервать;
	//			КонецЕсли;					
	//		КонецЦикла;     
	//		
	//		Если ПоискЗакончился тогда
	//			Прервать;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если ПоследняяНайденнаяСтрока = Неопределено тогда
	//		ДанныеПоПолю.ИсходныеДанные = ДанныеПоПолю.ФизическаяТаблица + "." + ДанныеПоПолю.ИмяПоля;	
	//	Иначе
	//		ДанныеПоПолю.ИсходныеДанные = ПоследняяНайденнаяСтрока.ФизическаяТаблица + "." + ПоследняяНайденнаяСтрока.ИмяПоля; 
	//	КонецЕсли;
	//КонецЦикла;
	а=4;	
	
	РезультатыЗапросов = Новый Массив;
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Для каждого ДанныеПоЗапросу из СписокЗапросов цикл
		Если ДанныеПоЗапросу.ЭтоУдаление тогда
			РезультатыЗапросов.Добавить(Неопределено);
			Продолжить;
		КонецЕсли;     
		
		Запрос = Новый Запрос(ДанныеПоЗапросу.ТекСхема.ПолучитьТекстЗапроса());  
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;  
		Для каждого КлючЗнч из ЗапросИсходный.Параметры цикл
			Запрос.Параметры.Вставить(КлючЗнч.Ключ,КлючЗнч.Значение);	
		КонецЦикла;
		СписокРезультатовЗапросов = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		РезультатыЗапросов.Добавить(СписокРезультатовЗапросов[СписокРезультатовЗапросов.Количество()-1]);
	КонецЦикла;
	
	Возврат Новый Структура("РезультатыЗапросов,СписокЗапросов,ИсходнаяСхема,ДанныеПоПолям",РезультатыЗапросов,СписокЗапросов,СхемаЗапроса, ДанныеПоПолям);
	
КонецФункции

Функция РекурсивноРазобратьЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, СписокЗапросов, ДанныеПоПолям, ВложенныйЗапросСхемыЗапроса = Неопределено) 
	
	ИменаТаблиц = Новый Массив;
	#Область ИсходнаяВерсия
	//Для каждого ОператорВыбратьСхемыЗапроса из ЗапросВыбораСхемыЗапроса.Операторы цикл
	//	Для каждого ИсточникСхемыЗапроса из ОператорВыбратьСхемыЗапроса.Источники цикл
	//		ИстСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
	//		Если ТипЗнч(ИстСхемыЗапроса) = Тип("ТаблицаСхемыЗапроса") тогда
	//			//Ничего
	//			ИменаТаблиц.Добавить(ИстСхемыЗапроса.ИмяТаблицы + " КАК " + ИстСхемыЗапроса.Псевдоним);
	//			
	//			//Поля                                                   
	//			Для каждого ДанныеПоПолю из ДанныеПоПолям цикл   
	//				Если Не ЗначениеЗаполнено(ДанныеПоПолю.ФизическаяТаблица) И 
	//					(ИстСхемыЗапроса.Псевдоним = ДанныеПоПолю.ПсевдонимТаблицы 
	//					ИЛИ (ВложенныйЗапросСхемыЗапроса<>Неопределено И ВложенныйЗапросСхемыЗапроса.Псевдоним =ДанныеПоПолю.ПсевдонимТаблицы )
	//					) тогда
	//					ДанныеПоПолю.ФизическаяТаблица = ИстСхемыЗапроса.ИмяТаблицы;
	//					ДанныеПоПолю.ПсевдонимФизическойТаблицы = ИстСхемыЗапроса.Псевдоним; 
	//					ДанныеПоПолю.ТаблицаДляПомещения = ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения;
	//				КонецЕсли;
	//			КонецЦикла;
	//		ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") тогда
	//			РекурсивноРазобратьЗапросВыбораСхемыЗапроса(ИстСхемыЗапроса.Запрос, СписокЗапросов, ДанныеПоПолям, ИстСхемыЗапроса);
	//		ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") тогда
	//			//Ничего
	//			а=4;
	//		Иначе
	//			Сообщить("Невозможная ошибка.");	
	//		КонецЕсли;
	//	КонецЦикла;  
	//КонецЦикла;
	//
	//СписокЗапросов.Добавить(Новый Структура("ТекСхема,ЭтоУдаление,ИменаТаблиц",ЗапросВыбораСхемыЗапроса,Ложь,ИменаТаблиц));	
	#КонецОбласти //ИсходнаяВерсия
	
	/////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////
	////////////  Добавляю объединения как отдельные запросы   
	/////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////   
	Для ИндексОператора = 0  по ЗапросВыбораСхемыЗапроса.Операторы.Количество()-1 цикл
		ОператорВыбратьСхемыЗапроса = ЗапросВыбораСхемыЗапроса.Операторы[ИндексОператора]; 
		
		Если ЗапросВыбораСхемыЗапроса.Операторы.Количество() > 1 тогда
			
			СхемаОдногоВыбрать = Новый СхемаЗапроса();
			СхемаОдногоВыбрать.УстановитьТекстЗапроса(ЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса());  
			Если СхемаОдногоВыбрать.ПакетЗапросов.Количество() <> 1 тогда
				ВызватьИсключение "Невозможная ошибка.";
			КонецЕсли;
			ТекЗапросВыбораСхемыЗапроса = СхемаОдногоВыбрать.ПакетЗапросов[0];
			ТекЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения = "";	
			Для счетчикДо = 0 по ИндексОператора-1 цикл
				ТекЗапросВыбораСхемыЗапроса.Операторы.Удалить(0);//Удаляю до	
			КонецЦикла;  
			//Сейчас нужный оператор становиться с индексом 0 и удаляю все остальные после него
			Пока ТекЗапросВыбораСхемыЗапроса.Операторы.Количество()<>1 цикл
				ТекЗапросВыбораСхемыЗапроса.Операторы.Удалить(1);	
			КонецЦикла;   
			
			ТекстОператора = СхемаОдногоВыбрать.ПолучитьТекстЗапроса();
			СписокЗапросов.Добавить(Новый Структура("ТекСхема,ЭтоУдаление,ИменаТаблиц,ТекстОператора",ТекЗапросВыбораСхемыЗапроса,Ложь,ИменаТаблиц,ТекстОператора));
			
		КонецЕсли;	
		
		
		Для каждого ИсточникСхемыЗапроса из ОператорВыбратьСхемыЗапроса.Источники цикл
			ИстСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
			Если ТипЗнч(ИстСхемыЗапроса) = Тип("ТаблицаСхемыЗапроса") тогда
				//Ничего
				ИменаТаблиц.Добавить(ИстСхемыЗапроса.ИмяТаблицы + " КАК " + ИстСхемыЗапроса.Псевдоним);
				
				//Поля                                                   
				Для каждого ДанныеПоПолю из ДанныеПоПолям цикл   
					Если Не ЗначениеЗаполнено(ДанныеПоПолю.ФизическаяТаблица) И 
						(ИстСхемыЗапроса.Псевдоним = ДанныеПоПолю.ПсевдонимТаблицы 
						ИЛИ (ВложенныйЗапросСхемыЗапроса<>Неопределено И ВложенныйЗапросСхемыЗапроса.Псевдоним =ДанныеПоПолю.ПсевдонимТаблицы )
						) тогда
						ДанныеПоПолю.ФизическаяТаблица = ИстСхемыЗапроса.ИмяТаблицы;
						ДанныеПоПолю.ПсевдонимФизическойТаблицы = ИстСхемыЗапроса.Псевдоним; 
						ДанныеПоПолю.ТаблицаДляПомещения = ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") тогда
				РекурсивноРазобратьЗапросВыбораСхемыЗапроса(ИстСхемыЗапроса.Запрос, СписокЗапросов, ДанныеПоПолям, ИстСхемыЗапроса);
			ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") тогда
				//СхемаТЗПараметра.УстановитьТекстЗапроса("Выбрать * ИЗ ");
				а=4;
			Иначе
				Сообщить("Невозможная ошибка.");	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	  
	
	
	СписокЗапросов.Добавить(Новый Структура("ТекСхема,ЭтоУдаление,ИменаТаблиц,ТекстОператора",ЗапросВыбораСхемыЗапроса,Ложь,ИменаТаблиц,ЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса()));
	
	
КонецФункции

#Область Переменные

Функция пТипВыполнения_ОбычныйЗапрос()
	Возврат 0;	
КонецФункции

Функция пТипВыполнения_ВыполнитьПакетно()
	Возврат 1;	
КонецФункции

Функция пТипВыполнения_РазборЗапроса()
	Возврат 2;	
КонецФункции

#КонецОбласти //Переменные

#Область СохранениеКонсолиВФайл

&НаКлиенте
Процедура СохранитьДанныеВФайл()

	Запись = Новый ЗаписьТекста(Объект.РабочийСтол,,,Истина);
	Запись.Записать("");
	Запись.Закрыть();
	
	лСохраненныйТекст = "";
	Попытка
		Чтение=Новый ЧтениеТекста(Объект.РабочийСтол);
		лСохраненныйТекст = Чтение.Прочитать(); 
		Чтение.Закрыть();           
	Исключение
	КонецПопытки;
	
	Текст = СохранитьДанныеВФайл_Сервер(лСохраненныйТекст);
	
	Запись=Новый ЗаписьТекста(Объект.РабочийСтол);
	Запись.Записать(Текст);
	Запись.Закрыть();
	
КонецПроцедуры

Функция СохранитьДанныеВФайл_Сервер(СохраненныйТекст)
	
	Если НЕ ПустаяСтрока(СохраненныйТекст) тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СохраненныйТекст);  
		Попытка
			Соответствие = СериализаторXDTO.ПрочитатьXML(Чтение);
		Исключение                                                     
			Соответствие = Новый Соответствие;
			Сообщить("Не получилось прочитать сохраненные данные.");
		КонецПопытки;
		Чтение.Закрыть();                        
	Иначе
		Соответствие = Новый Соответствие;	
	КонецЕсли;
	
	рфСписокЗапросовОб = РеквизитФормыВЗначение("рфСписокЗапросов");
	СохраняемыеДанныеПоБазе = Новый Структура("Запросы", рфСписокЗапросовОб);
	СохраняемыеДанныеПоБазе.Вставить("ТЗ_Запросов", Новый Структура());
	СохраняемыеДанныеПоБазе.Вставить("рфДопДанныеДляСохранения", рфДопДанныеДляСохранения);
	СуществующиеРеквизиты = ПолучитьРеквизиты();
	СохранитьПараметрыТЗ(рфСписокЗапросовОб, СуществующиеРеквизиты, СохраняемыеДанныеПоБазе.ТЗ_Запросов);
	
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(Запись, СохраняемыеДанныеПоБазе, НазначениеТипаXML.Явное);
	СохраняемыеДанныеПоБазе_XML = Запись.Закрыть();
	
	ДанныеПоБазе = Новый Структура();
	ДанныеПоБазе.Вставить("ВерсияКонфигурации", Метаданные.Имя + " " + Метаданные.Версия);
	ДанныеПоБазе.Вставить("СериализованныеДанные", СохраняемыеДанныеПоБазе_XML);
	
	Соответствие.Вставить(СтрокаСоединенияИнформационнойБазы(), ДанныеПоБазе);
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("");
	СериализаторXDTO.ЗаписатьXML(Запись, Соответствие, НазначениеТипаXML.Явное);
	Текст = Запись.Закрыть();
	
	Возврат Текст;
	
КонецФункции

Процедура СохранитьПараметрыТЗ(РодительскаяСтр, СуществующиеРеквизиты, СтруктураТЗ)
	
	Для каждого стрЗапрос из РодительскаяСтр.Строки цикл
		
		Для каждого стрПар из стрЗапрос.Параметры цикл
			
			Если НЕ СтрПар.ЭтоТаблица тогда
				Продолжить;
			КонецЕсли;
			
			лРеквизитНайден = Ложь;
			Для каждого ДанныеПоРеквизиту из СуществующиеРеквизиты цикл
				Если ДанныеПоРеквизиту.Имя = СтрПар.Значение тогда
					лРеквизитНайден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;      
			Если лРеквизитНайден тогда
				СтруктураТЗ.Вставить(СтрПар.Значение, РеквизитФормыВЗначение(СтрПар.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //СохранениеКонсолиВФайл

#Область ЗагрузкаКонсолиИзФайла

Процедура ПриОткрытии_ЗагрузкаСохраненногоЗапроса(СохраненныйТекст)
	
	Если НЕ ПустаяСтрока(СохраненныйТекст) тогда
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(СохраненныйТекст);  
		Попытка
			Соответствие = СериализаторXDTO.ПрочитатьXML(Чтение);
		Исключение      
			Соответствие = Новый Соответствие;
			Сообщить("Не получилось прочитать сохраненные данные.");
		КонецПопытки;
		Чтение.Закрыть();                        
	Иначе
		Соответствие = Новый Соответствие;	
	КонецЕсли;	
	
	рфСохраненныеБазы.Очистить();
	Для каждого КлючЗнч из Соответствие цикл
		Стр = рфСохраненныеБазы.Добавить();
		Стр.СтрокаСоединенияИнформационнойБазы = КлючЗнч.Ключ;
		Стр.Версия = КлючЗнч.Значение.ВерсияКонфигурации;
	КонецЦикла;
	
	ДанныеПоБазе = Соответствие.Получить(СтрокаСоединенияИнформационнойБазы());
	
	Если ДанныеПоБазе <> неопределено Тогда
		
		ДанныеПоТекБазе_Строка = ДанныеПоБазе.СериализованныеДанные;
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ДанныеПоТекБазе_Строка);
		ДанныеПоТекБазе = СериализаторXDTO.ПрочитатьXML(Чтение);
		Чтение.Закрыть();
		
		ТЗ_Запросы = ДанныеПоТекБазе.Запросы;   
		//2023_05_01__10_20
		Если ТЗ_Запросы.Колонки.Найти("Порядок") = Неопределено тогда
			ТЗ_Запросы.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));	
		КонецЕсли;
		//-- 2023_05_01__10_20
		
		ЗначениеВРеквизитФормы(ТЗ_Запросы, "рфСписокЗапросов");	   
		Если ДанныеПоТекБазе.Свойство("ТЗ_Запросов") тогда
			Для каждого КлючЗнч из ДанныеПоТекБазе.ТЗ_Запросов цикл
				ИмяРеквизитаТЗ = КлючЗнч.Ключ;
				ТЗ = КлючЗнч.Значение; 
				СгененироватьТаблицуЗначенийДляФормы(ИмяРеквизитаТЗ, ТЗ);
				ЗначениеВРеквизитФормы(ТЗ, ИмяРеквизитаТЗ);
			КонецЦикла;                                       
		КонецЕсли;
		
		Если ДанныеПоТекБазе.Свойство("рфДопДанныеДляСохранения") тогда
			рфДопДанныеДляСохранения = ДанныеПоТекБазе.рфДопДанныеДляСохранения;	
		КонецЕсли;
		
	КонецЕсли;	  
		
КонецПроцедуры

#КонецОбласти //ЗагрузкаКонсолиИзФайла


#Область СлужебныеФункции

Функция ПолучитьТекстОтладкиЗапроса() 
	
	лОб = РеквизитФормыВЗначение("Объект");	
	ПолныйПуть = лОб.ИспользуемоеИмяФайла; 
	ТекстОтладки = "ВнешниеОбработки.Создать(""" +ПолныйПуть+""", Истина).ОтладкаЗапросаИзКонфигуратора(Запрос)";
	ТекстОтладки = ТекстОтладки + Символы.ПС + "ОбщегоНазначения.ЗапросВСтрокуXML(Запрос)";
	Возврат ТекстОтладки;
	
КонецФункции

Процедура ЗагрузитьЗапросИзXml_Сервер()
	
	лТекст = рфТекстЗапроса.ПолучитьТекст();
	лТекст = СтрЗаменить(лТекст, Символ(182), Символы.ПС);
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(лТекст); 
	СохрЗначение = СериализаторXDTO.ПрочитатьXML(Чтение);
	Чтение.Закрыть();                                        
	
	СтрТекстЗапроса = СохрЗначение.Текст;
	СохраненныеПараметры = СохрЗначение.Параметры;
	Если СохрЗначение.Свойство("МенеджерВТ_РезультатыЗапроса") тогда
		МассивТекстовЗапроса = Новый Массив;
		Для счетчик = 0 по СохрЗначение.МенеджерВТ_РезультатыЗапроса.Количество()-1 цикл
			ДанныеПоСохраненнойТаблицы = СохрЗначение.МенеджерВТ_РезультатыЗапроса[счетчик]; 
			
			ИмяТаб = ДанныеПоСохраненнойТаблицы.ИмяТаблицыВТ;
			
			ТекстыПолей = Новый Массив;	
			Для каждого Колонка из ДанныеПоСохраненнойТаблицы.ТЗ.Колонки цикл
				ТекстыПолей.Добавить( ИмяТаб + "." + Колонка.Имя + " КАК " + Колонка.Имя);
			КонецЦикла;
			
			
			ТекстЗапроса = " Выбрать " + Символы.ПС + СтрСоединить(ТекстыПолей,","+Символы.ПС) + Символы.ПС+ " Поместить " + ИмяТаб + " из &" + ИмяТаб + " КАК " + ИмяТаб + Символы.ПС;
			
			МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		КонецЦикла;
		МассивТекстовЗапроса.Добавить(СохрЗначение.Текст);		
		СтрТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ";");	
	КонецЕсли;
	
	рфТекстЗапроса.УстановитьТекст(СтрТекстЗапроса);
	
	ОбновляюПараметры();	
	
	ТЗ_Параметры = РеквизитФормыВЗначение("рфПараметры");   
	
	Если СохрЗначение.Свойство("МенеджерВТ_РезультатыЗапроса") тогда
		Для счетчик = 0 по СохрЗначение.МенеджерВТ_РезультатыЗапроса.Количество()-1 цикл
			ДанныеПоСохраненнойТаблицы = СохрЗначение.МенеджерВТ_РезультатыЗапроса[счетчик]; 
			ИмяТаб = ДанныеПоСохраненнойТаблицы.ИмяТаблицыВТ;
			ТЗ = ДанныеПоСохраненнойТаблицы.ТЗ;	
			
			СуществующаяСтрПар = ТЗ_Параметры.Найти(ИмяТаб, "Имя");  
			Префикс = "";
			Если СуществующаяСтрПар = Неопределено тогда
				Префикс = "лишний__";	
			Иначе
				ТЗ_Параметры.Удалить(СуществующаяСтрПар);	
			КонецЕсли;
			
			лТекСтрЗапрос = Элементы.СписокЗапросов.ТекущаяСтрока;
			Если лТекСтрЗапрос = Неопределено тогда
				Префикс = Префикс + "Пустая";      
			Иначе
				ДанныеПоСтр = рфСписокЗапросов.НайтиПоИдентификатору(лТекСтрЗапрос);
				Если ДанныеПоСтр = Неопределено тогда
					Префикс = Префикс + "Пустая";
				Иначе
					Префикс = Префикс + "П" + ИмяТаб;	
				КонецЕсли;
			КонецЕсли;
			ИмяРеквизитаТЗ = Префикс + "_ТЗ";
			СгененироватьТаблицуЗначенийДляФормы(ИмяРеквизитаТЗ, ТЗ); 
			ЗначениеВРеквизитФормы(ТЗ, ИмяРеквизитаТЗ);  
			стрТз = ТЗ_Параметры.Добавить();
			стрТз.Имя = ИмяТаб;
			стрТз.Тип = Новый ОписаниеТипов("Строка");
			стрТз.Значение = ИмяРеквизитаТЗ; 
			стрТз.ЭтоТаблица = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Для каждого КлючЗнч из СохраненныеПараметры цикл 
		
		стрТз = ТЗ_Параметры.Найти(КлючЗнч.Ключ, "Имя");
		Если стрТз = Неопределено тогда    
			стрТз = ТЗ_Параметры.Добавить();
			стрТз.Имя = КлючЗнч.Ключ;
		КонецЕсли;
		
		лЗначПар = КлючЗнч.Значение;  
		
		ЭтоИзМенеджера = Ложь;
		Если СохрЗначение.Свойство("МенеджерВТ_РезультатыЗапроса") тогда
			Для каждого ДанныеПоСохраненнойТаблицы из СохрЗначение.МенеджерВТ_РезультатыЗапроса цикл
				ИмяТаб = ДанныеПоСохраненнойТаблицы.ИмяТаблицыВТ;
				Если ИмяТаб = стрТз.Имя тогда
					//лЗначПар =  ДанныеПоСохраненнойТаблицы.ТЗ; //ТЗ
					ЭтоИзМенеджера = Истина; 
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЭтоИзМенеджера тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(лЗначПар) = Тип("Массив") тогда
			лПарСписокЗначений = Новый СписокЗначений;
			лПарСписокЗначений.ЗагрузитьЗначения(лЗначПар);
			лЗначПар = лПарСписокЗначений;
		ИначеЕсли ТипЗнч(лЗначПар) = Тип("ТаблицаЗначений") тогда
			лТекСтрЗапрос = Элементы.СписокЗапросов.ТекущаяСтрока;
			Если лТекСтрЗапрос = Неопределено тогда
				Префикс = "Пустая";      
			Иначе
				ДанныеПоСтр = рфСписокЗапросов.НайтиПоИдентификатору(лТекСтрЗапрос);
				Если ДанныеПоСтр = Неопределено тогда
					Префикс = "Пустая";
				Иначе
					Префикс = "П" + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0");	
				КонецЕсли;
			КонецЕсли;
			ИмяРеквизитаТЗ = Префикс + "_ТЗ";
			СгененироватьТаблицуЗначенийДляФормы(ИмяРеквизитаТЗ, лЗначПар); 
			ЗначениеВРеквизитФормы(лЗначПар, ИмяРеквизитаТЗ); 
			стрТз.Тип = Новый ОписаниеТипов("Строка");
			стрТз.Значение = ИмяРеквизитаТЗ; 
			стрТз.ЭтоТаблица = Истина;
			Продолжить; 
		ИначеЕсли ТипЗнч(лЗначПар) = Тип("Граница") тогда	
			ГраницаД = лЗначПар;
			Если ГраницаД.ВидГраницы = ВидГраницы.Исключая тогда
				лЗначПар = стрТз.Имя + " = Новый Граница(Дата(""" + Формат(ГраницаД.Значение,"ДФ=ггггММддЧЧммсс") + """),ВидГраницы.Включая)";	
			Иначе
				лЗначПар = стрТз.Имя + " = Новый Граница(Дата(""" + Формат(ГраницаД.Значение,"ДФ=ггггММддЧЧммсс") + """),ВидГраницы.Исключая)";	
			КонецЕсли;                                   
			стрТз.ЭтоКод = Истина;
			стрТз.Тип = Новый ОписаниеТипов("Строка");
			стрТз.Значение = лЗначПар;
			Продолжить;	  
		ИначеЕсли ТипЗнч(лЗначПар) = Тип("Тип") тогда
			ДобавТипы = Новый Массив();
			ДобавТипы.Добавить(лЗначПар); 
			стрТз.Тип = Новый ОписаниеТипов("ОписаниеТипов");
			стрТз.Значение = Новый ОписаниеТипов(ДобавТипы);
			Продолжить;
		КонецЕсли;   
		
		ДобавТипы = Новый Массив();
		ДобавТипы.Добавить(ТипЗнч(лЗначПар));
		стрТз.Тип = Новый ОписаниеТипов(ДобавТипы); 
		стрТз.Значение = лЗначПар;
	КонецЦикла;     
	
	ЗначениеВРеквизитФормы(ТЗ_Параметры, "рфПараметры"); 
	
КонецПроцедуры

Процедура ЗагрузитьЗапросИзСтрВнут_Сервер()
	
	лТекст = рфТекстЗапроса.ПолучитьТекст();
	лТекст = СтрЗаменить(лТекст, Символ(182), Символы.ПС);	
	Структура = ЗначениеИзСтрокиВнутр(лТекст);
	Запрос = Новый Запрос;
	Запрос.Текст = Структура.Текст;
	Для каждого Пар из Структура.Параметры цикл
		Запрос.Параметры.Вставить(Пар.Ключ, Пар.Значение);	
	КонецЦикла;                    
	СериализованныйТекст = РеквизитФормыВЗначение("Объект").ОтладкаЗапросаИзКонфигуратора(Запрос);
	рфТекстЗапроса.УстановитьТекст(СериализованныйТекст);
	ЗагрузитьЗапросИзXml_Сервер();
	
КонецПроцедуры

Процедура СгененироватьТаблицуЗначенийДляФормы(ИмяРеквизитаТЗ, ТЗ) Экспорт
	
	МассивТипаТЗ = Новый Массив;
	МассивТипаТЗ.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаТЗ = Новый ОписаниеТипов(МассивТипаТЗ);
	МассивРеквизитов = Новый Массив; 
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаТЗ, ОписаниеТипаТЗ, "", "ТЗН"));
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяРеквизитаТЗ));
		
	КонецЦикла;  
	УдаляемыеРеквизиты = Новый Массив;
	СуществующиеРеквизиты = ПолучитьРеквизиты();
	Для каждого СущьРек из СуществующиеРеквизиты цикл
		Если СущьРек.Имя = ИмяРеквизитаТЗ тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаТЗ);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивРеквизитов,УдаляемыеРеквизиты);
	
КонецПроцедуры 

Функция ПоместитьТЗВоВременноеХранилище(ИмяРеквизитаТЗ)
	
	лСуществующиеРеквизиты = ПолучитьРеквизиты();
	лРеквизитНайден = Ложь;
	Для каждого ДанныеПоРеквизиту из лСуществующиеРеквизиты цикл
		Если ДанныеПоРеквизиту.Имя = ИмяРеквизитаТЗ тогда
			лРеквизитНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;      
	Если лРеквизитНайден тогда
		лЗнчПар = РеквизитФормыВЗначение(ИмяРеквизитаТЗ);	
	Иначе
		сообщить("Не найдена таблица: " + ИмяРеквизитаТЗ + ".");
		лЗнчПар = Новый ТаблицаЗначений;
	КонецЕсли;
	АдресТЗ = ПоместитьВоВременноеХранилище(лЗнчПар, ЭтаФорма.УникальныйИдентификатор);
	Возврат АдресТЗ;
	
КонецФункции

Процедура ЗагрузитьТаблицуВПараметр(ИмяРеквизитаТЗ, АдресТЗ)  
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТЗ) тогда
		Сообщить("Невозможная ошибка. Прислал не адрес временного хранилища.");
		Возврат;
	КонецЕсли;
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	СгененироватьТаблицуЗначенийДляФормы(ИмяРеквизитаТЗ, ТЗ);
	ЗначениеВРеквизитФормы(ТЗ, ИмяРеквизитаТЗ); 
	
КонецПроцедуры

Процедура УстановитьВПараметрСписокЗначений(ИдСтроки)
	
	Если ИдСтроки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтрПар = рфПараметры.НайтиПоИдентификатору(ИдСтроки);
	Если СтрПар = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтрПар.Значение = Новый СписокЗначений;
	СтрПар.Значение.ТипЗначения = СтрПар.Тип; 
	
КонецПроцедуры

#Область АнализИсторииПроисхожденияВТ

Процедура АнализИсторииВт(ТабДок)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(рфТекстЗапроса.ПолучитьТекст());  
	
	а = 4; 
	
	//ДанныеПоТаблицам = Новый ТаблицаЗначений;
	//ДанныеПоТаблицам.Колонки.Добавить("ИмяВт", Новый ОписаниеТипов("Строка"));
	//ДанныеПоТаблицам.Колонки.Добавить("ЭтоУдаление", Новый ОписаниеТипов("Булево"));
	//ДанныеПоТаблицам.Колонки.Добавить("ТаблицыИсточники", Новый ОписаниеТипов("Строка"));
	
	ДанныеПоТаблицам = Новый Массив;
	
	Для каждого ЗапросВыбораСхемыЗапроса из СхемаЗапроса.ПакетЗапросов цикл  
		
		ДанныеПоТаблице = Новый Структура("ИмяВт,ЭтоУдаление,ТаблицыИсточники","", Ложь, Новый Массив);	
		
		Анализ_ЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, ДанныеПоТаблице, Ложь);
		
		ДанныеПоТаблицам.Добавить(ДанныеПоТаблице);
		
	КонецЦикла;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	Ячейка = Макет.ПолучитьОбласть("Ячейка");
	ПустаяЯчейка = Макет.ПолучитьОбласть("ПустаяЯчейка");
	
	#Область ЗаполнениеТаблицЦветов
	
	УникИменаТаблиц = Новый Соответствие;
	Для каждого ДанныеПоТаблице1 из ДанныеПоТаблицам цикл
		ИмяВт1 = ДанныеПоТаблице1.ИмяВт;
		УникИменаТаблиц.Вставить(ИмяВт1);	
	КонецЦикла;
	
	счетчик = -1;
	Для каждого КлючЗнч из УникИменаТаблиц цикл
		
		счетчик = счетчик + 1;
		Если счетчик >= рфЦветаАнализТаблиц.Количество() тогда
			Прервать;
		КонецЕсли;
		
		УникИменаТаблиц.Вставить(КлючЗнч.Ключ, рфЦветаАнализТаблиц[счетчик].Цвет);
	КонецЦикла;
	
	#КонецОбласти //ЗаполнениеТаблицЦветов
	
	ДопДанные = Новый Структура();
	ДопДанные.Вставить("ИмяТаблицыЦвет", УникИменаТаблиц); 
	
	УровеньВывода = 0;
	Для каждого ДанныеПоТаблице из ДанныеПоТаблицам цикл
		
		ВывестиАнализВременнойТаблицы(ТабДок, ДанныеПоТаблице, УровеньВывода, Ячейка, ПустаяЯчейка, ДопДанные);  
		
	КонецЦикла;
	
	
	
КонецПроцедуры

Процедура Анализ_ЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, ДанныеПоТаблице, ЭтоВложенный) 
	
	Если Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") = ТипЗнч(ЗапросВыбораСхемыЗапроса) тогда
		//СтрУд = ДанныеПоТаблицам.Добавить();
		ДанныеПоТаблице.ИмяВт = ЗапросВыбораСхемыЗапроса.ИмяТаблицы; 
		ДанныеПоТаблице.ЭтоУдаление = Истина;
		Возврат;
	КонецЕсли;  
	
	ИмяТаблицы = ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения;
	Если ПустаяСтрока(ИмяТаблицы) И ЭтоВложенный тогда
		ИмяТаблицы = "---";	
	КонецЕсли;
	//Пропускаю просто выбор
	//Если ПустаяСтрока(ИмяТаблицы) И НЕ ЭтоВложенный тогда
	//	Возврат;
	//КонецЕсли;  
	//
	//СтрДТ = ДанныеПоТаблицам.Добавить();
	ДанныеПоТаблице.ИмяВт = ИмяТаблицы; 
	
	Для каждого ОператорыСхемыЗапроса из ЗапросВыбораСхемыЗапроса.Операторы цикл
		Для каждого ИсточникСхемыЗапроса из ОператорыСхемыЗапроса.Источники цикл
			
			ИстСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
			Если ТипЗнч(ИстСхемыЗапроса) = Тип("ТаблицаСхемыЗапроса") тогда
				ТаблицаИсточник = ИстСхемыЗапроса.ИмяТаблицы;
				//СтрДТ.ТаблицыИсточники = СтрДТ.ТаблицыИсточники + ТаблицаИсточник +", " 
				вложДанныеПоТаблице = Новый Структура("ИмяВт,ЭтоУдаление,ТаблицыИсточники",ТаблицаИсточник, Ложь, Новый Массив);
				ДанныеПоТаблице.ТаблицыИсточники.Добавить(вложДанныеПоТаблице);	
			ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") тогда
				
				лЗапросВыбораСхемыЗапроса = ИстСхемыЗапроса.Запрос;	
				//Анализ  
				вложДанныеПоТаблице = Новый Структура("ИмяВт,ЭтоУдаление,ТаблицыИсточники","", Ложь, Новый Массив);
				
				Анализ_ЗапросВыбораСхемыЗапроса(лЗапросВыбораСхемыЗапроса, вложДанныеПоТаблице, Истина);
				
				ДанныеПоТаблице.ТаблицыИсточники.Добавить(вложДанныеПоТаблице);
				
			ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") тогда
				ТаблицаИсточник = ИстСхемыЗапроса.ИмяТаблицы;
				//СтрДТ.ТаблицыИсточники = СтрДТ.ТаблицыИсточники + ТаблицаИсточник +", "
				вложДанныеПоТаблице = Новый Структура("ИмяВт,ЭтоУдаление,ТаблицыИсточники",ТаблицаИсточник, Ложь, Новый Массив);
				ДанныеПоТаблице.ТаблицыИсточники.Добавить(вложДанныеПоТаблице);
			Иначе
				ВызватьИсключение "Невозможная ошибка. 2023_04_15__10_53";	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	  
	
КонецПроцедуры

Процедура ВывестиАнализВременнойТаблицы(ТабДок, ДанныеПоТаблице, УровеньВывода, Ячейка, ПустаяЯчейка, ДопДанные)
	
	Для счетчик = 0 по УровеньВывода цикл
		Если счетчик = 0 тогда
			ВыведеннаяОбласть = ТабДок.Вывести(ПустаяЯчейка);
		Иначе
			ВыведеннаяОбласть = ТабДок.Присоединить(ПустаяЯчейка);
		КонецЕсли;
	КонецЦикла;
	
	Ячейка.Параметры.Ячейка = ДанныеПоТаблице.ИмяВт;
	
	ВыведеннаяОбласть = ТабДок.Присоединить(Ячейка);  
	
	ЦветТаблицы = ДопДанные.ИмяТаблицыЦвет[ДанныеПоТаблице.ИмяВт];
	Если ЦветТаблицы <> Неопределено тогда
		ВыведеннаяОбласть.ЦветФона = ЦветТаблицы;	
	КонецЕсли;
	
	Для каждого ДанныеПоТаблице_Вложенная из ДанныеПоТаблице.ТаблицыИсточники цикл
		ВывестиАнализВременнойТаблицы(ТабДок, ДанныеПоТаблице_Вложенная, УровеньВывода+1, Ячейка, ПустаяЯчейка, ДопДанные);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьИзМакетаЦвета()
	
	рфЦветаАнализТаблиц.Очистить();	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");	
	ЦветаТД = Макет.ПолучитьОбласть("Цвета");
	
	КолонкаНомер = 1;
	КолонкаПорядок = 2;
	КолонкаЦвет = 3;
	
	Для счетчик = 1 по ЦветаТД.ВысотаТаблицы цикл
		Стр = рфЦветаАнализТаблиц.Добавить();
		Стр.Номер = ЦветаТД.Область(счетчик, КолонкаНомер).Текст; 
		Стр.Порядок = ЦветаТД.Область(счетчик, КолонкаПорядок).Текст;
		Стр.Цвет 	= ЦветаТД.Область(счетчик, КолонкаЦвет).ЦветФона;
	КонецЦикла;  
	рфЦветаАнализТаблиц.Сортировать("Порядок");
	
	ТЗ_Копия = РеквизитФормыВЗначение("рфЦветаАнализТаблиц");
	ТЗ_Копия.Свернуть("Порядок");
	УникальныеПорядок = ТЗ_Копия.ВыгрузитьКолонку("Порядок");	
	
	
	ТЗ_Копия = РеквизитФормыВЗначение("рфЦветаАнализТаблиц");
	ТЗ_Финальная = ТЗ_Копия.СкопироватьКолонки();
	
	СчетчикПорядка = 0;
	Пока ТЗ_Копия.Количество() > 0 цикл
		
		Если СчетчикПорядка >= УникальныеПорядок.Количество() тогда
			СчетчикПорядка = 0;	
		КонецЕсли;  
		ТекНомерПорядка = УникальныеПорядок[СчетчикПорядка]; 
		
		Стр = ТЗ_Копия.Найти(ТекНомерПорядка, "Порядок");
		Если Стр = Неопределено тогда
			УникальныеПорядок.Удалить(СчетчикПорядка);	
		Иначе
			Новая = ТЗ_Финальная.Добавить();
			ЗаполнитьЗначенияСвойств(Новая, Стр);   
			ТЗ_Копия.Удалить(Стр);
		КонецЕсли;
		
		СчетчикПорядка = СчетчикПорядка + 1;
		
	КонецЦикла;
	а = 4;
	ЗначениеВРеквизитФормы(ТЗ_Финальная, "рфЦветаАнализТаблиц");
	
	
	
КонецПроцедуры

#КонецОбласти //АнализИсторииПроисхожденияВТ

&НаСервере
Процедура УдалитьЛишниеПараметрыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст=рфТекстЗапроса.ПолучитьТекст();
	
	ТЗ = РеквизитФормыВЗначение("рфПараметры");
	
	НужныеСтроки = Новый Массив;  
	Для каждого стр из ТЗ цикл
		НужноУдалить = Истина;
		Для каждого ел из запрос.НайтиПараметры() цикл   
			Если стр.Имя = ел.Имя тогда
				НужноУдалить = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НужноУдалить тогда
			НужныеСтроки.Добавить(стр);	
		КонецЕсли;
		
	КонецЦикла;
	
	ТолькоНужныеСтроки = ТЗ.Скопировать(НужныеСтроки);
	ЗначениеВРеквизитФормы(ТолькоНужныеСтроки, "рфПараметры");
	
КонецПроцедуры

Функция ПолучитьЗначениеЭкспортногоПараметра(ДанныеПоПар)
	лЗнчПар = Неопределено;
	ВыполняемыйТекст = ДанныеПоПар.Имя+"=Неопределено;
	|"+ДанныеПоПар.Значение+";
	|лЗнчПар = "+ДанныеПоПар.Имя;
	Выполнить(ВыполняемыйТекст);  
	Возврат лЗнчПар;
КонецФункции

Процедура ОбновляюПараметры()
	
	Если НЕ рфНеУдалятьПараметры тогда
		рфПараметры.Очистить();
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст=рфТекстЗапроса.ПолучитьТекст();
	
	Для каждого ел из запрос.НайтиПараметры() цикл
		СтрокиПар=рфПараметры.НайтиСтроки(Новый Структура("Имя",ел.Имя));
		Если СтрокиПар.Количество()=0 тогда
			Стр=рфПараметры.Добавить();
		Иначе
			Стр=СтрокиПар[0];
			Если Стр.тип=ел.ТипЗначения тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Стр.Имя=ел.Имя;    
		Если ел.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) тогда
			Стр.тип = Новый Описаниетипов();	
		Иначе
			Стр.тип = ел.ТипЗначения;
		КонецЕсли;
		Стр.Значение=Стр.тип.ПривестиЗначение();
	КонецЦикла;
	
КонецПроцедуры

Функция СохраняюТекущийЗапрос(ИД)
	
	Если ИД=Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;  
	
	Стр = рфСписокЗапросов.НайтиПоИдентификатору(ИД);
	Если Стр = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;   
	
	НужноСохранитьВФайл = Ложь;
	лТекТекстЗапроса = рфТекстЗапроса.ПолучитьТекст();   
	Если Стр.текстЗапроса <> лТекТекстЗапроса тогда
		НужноСохранитьВФайл = Истина;
	КонецЕсли;
	Стр.текстЗапроса = лТекТекстЗапроса;
	//МассивПар=Новый Массив;      
	ТзПар = РеквизитФормыВЗначение("рфПараметры");
	//Для каждого лДанныеОПар из ТзПар цикл  
	//	ТекПараметры = Новый Структура();
	//	Для каждого Колонка из ТзПар.Колонки цикл
	//		ТекПараметры.Вставить(Колонка.Имя, лДанныеОПар[Колонка.Имя]);	
	//	КонецЦикла;
	//	МассивПар.Добавить(ТекПараметры);			
	//КонецЦикла;
	//Стр.Хранилище_Параметры=ПоместитьВоВременноеХранилище(МассивПар,Стр.GUID_Параметры);  
	
	Стр.Параметры.Загрузить(ТзПар);
	
	лТабДок = Новый ТабличныйДокумент;
	лТабДок.Вывести(рфТабДок);
	Стр.Хранилище_ТабДок=ПоместитьВоВременноеХранилище(лТабДок, ЭтаФорма.УникальныйИдентификатор); 
	
	рфПараметрыФормы.ВремяПоследнегоСохранения = ТекущаяДата();         
	
	Секунды = ТекущаяДата() - рфПараметрыФормы.ВремяПоследнегоСохранения; 
	ЭтаФорма.Заголовок = рфПараметрыФормы.Заголовок + Строка(Секунды);
	
	Возврат Новый Структура("НужноСохранитьВФайл", НужноСохранитьВФайл);
	
КонецФункции

Функция ЗавершениеНеПрограммное()
	Возврат НЕ Параметры.ПрограммноеОткрытие;	
КонецФункции

Процедура ОбновитьВсеСервер(ИД,СтараяСтрока) 
	
	Если СтараяСтрока<>Неопределено тогда
		СохраняюТекущийЗапрос(СтараяСтрока);	
	КонецЕсли;	
	Если Ид=Неопределено тогда
		Возврат;
	КонецЕсли;
	Стр=рфСписокЗапросов.НайтиПоИдентификатору(Ид);
	
	рфПараметры.Очистить();
	рфТабДок.Очистить();
	Если Стр = Неопределено тогда
		Возврат;
	КонецЕсли;		  
	
	Для каждого сохрПар из Стр.Параметры цикл
		ТекПар = рфПараметры.Добавить();
		ЗаполнитьЗначенияСвойств(ТекПар, сохрПар);
	КонецЦикла;
	//Если ЭтоАдресВременногоХранилища(стр.Хранилище_Параметры) тогда
	//	массивПар=ПолучитьИзВременногоХранилища(стр.Хранилище_Параметры);
	//	Для каждого ДанныеОПараметрах из массивПар цикл
	//		лС=рфПараметры.Добавить();
	//		//лС.Имя=ДанныеОПараметрах.Имя;
	//		//лС.Тип=ДанныеОПараметрах.Тип;
	//		//лС.Значение=ДанныеОПараметрах.Значение;
	//		//лС.ЭтоКод=ДанныеОПараметрах.ЭтоКод;   
	//		ЗаполнитьЗначенияСвойств(лС, ДанныеОПараметрах);
	//	КонецЦикла;
	//КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(стр.Хранилище_ТабДок) тогда 
		лСохраненныйТабДок = ПолучитьИзВременногоХранилища(стр.Хранилище_ТабДок); 
		Если лСохраненныйТабДок <> Неопределено тогда
			рфТабДок.Вывести(лСохраненныйТабДок);		                    
		КонецЕсли;
	КонецЕсли;
	рфТекстЗапроса.УстановитьТекст(стр.текстЗапроса);
	
КонецПроцедуры

Функция ТекущиеДанныеВыборКода()
	ДанныеСтроки = рфПараметры.НайтиПоИдентификатору(Элементы.рфПараметры.ТекущаяСтрока);
	Структура = Новый Структура();	
	Для каждого Колонка из РеквизитФормыВЗначение("рфПараметры").Колонки цикл
		Структура.Вставить(Колонка.Имя,ДанныеСтроки[Колонка.Имя]);	
	КонецЦикла;
	Возврат Структура;		
КонецФункции

Процедура ВывестиРазделительЗапросов(ЗаКонецПрошлогоЗапроса_НомерСтроки, ТабДок, ОбластьРазделительПакетов, НомерКолонкиДопДанных)   
	
	ВыведеннаяОбласть = ТабДок.Вывести(ОбластьРазделительПакетов);	
	НомерСтрокиДоРазделителя = ВыведеннаяОбласть.Низ - 1;
	
	ОбластьТекЗапроса = ТабДок.Область(ЗаКонецПрошлогоЗапроса_НомерСтроки,,НомерСтрокиДоРазделителя,);
	ОбластьТекЗапроса.СоздатьФорматСтрок();
	
	Если НомерКолонкиДопДанных <> Неопределено тогда
		ОблИмяТаблицы = ТабДок.Область(ЗаКонецПрошлогоЗапроса_НомерСтроки,НомерКолонкиДопДанных,НомерСтрокиДоРазделителя,НомерКолонкиДопДанных);
		ОблИмяТаблицы.ШиринаКолонки = 25;
	КонецЕсли; 
	
	ЗаКонецПрошлогоЗапроса_НомерСтроки = НомерСтрокиДоРазделителя + 1; 
	
КонецПроцедуры

Функция НужноПереоткрыть()
	Возврат НЕ Параметры.ПрограммноеОткрытие;	
КонецФункции

&НаКлиенте
Функция ПереоткрытиеПрограммно() 
	
	ФормаПереоткроется = НужноПереоткрыть();
	Если ФормаПереоткроется тогда
		ОткрытьФорму(Объект.ПутьКФормам,Новый Структура("ПрограммноеОткрытие",Истина),,Новый УникальныйИдентификатор());	
		//ПодключитьОбработчикОжидания("ЗакрытьФорму",0.1,1);
		ЗакрытьФорму();
	КонецЕсли; 
	
	Возврат ФормаПереоткроется;  
	
КонецФункции

#КонецОбласти //СлужебныеФункции

глобал_СтараяСтрокаЗапроса=Неопределено;

