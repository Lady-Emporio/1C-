
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПрочитатьИзМакетаЦвета();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Анализ(Команда)
	АнализНаСервере();
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура АнализНаСервере()    
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(рфТекстЗапроса.ПолучитьТекст());  
	
	ДанныеПоТаблицам = СоздатьЛокальнуюПеременную_ДанныеПоТаблицам();
	
	Для каждого ЗапросВыбораСхемыЗапроса из СхемаЗапроса.ПакетЗапросов цикл  
		
		ДанныеПоТаблице = ДанныеПоТаблицам.Добавить();	
		
		Анализ_ЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, ДанныеПоТаблице, Ложь);
		
	КонецЦикла;	
	
	Анализ_ВыводДанныхПоТаблице(ДанныеПоТаблицам);
	
	а = 4;
	
КонецПроцедуры

Процедура Анализ_ЗапросВыбораСхемыЗапроса(ЗапросВыбораСхемыЗапроса, ДанныеПоТаблице, ЭтоВложенный) 
	
	Если Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") = ТипЗнч(ЗапросВыбораСхемыЗапроса) тогда
		ДанныеПоТаблице.ИмяВт = ЗапросВыбораСхемыЗапроса.ИмяТаблицы; 
		ДанныеПоТаблице.ЭтоУничтоженияТаблицы = Истина;
		Возврат;
	КонецЕсли;  
	
	ИмяТаблицы = ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения;
	Если ПустаяСтрока(ИмяТаблицы) И ЭтоВложенный тогда
		ИмяТаблицы = "---";	
	КонецЕсли;       
	
	ДанныеПоТаблице.ИмяВт = ИмяТаблицы; 
	ДанныеПоТаблице.ТекстЗапроса = ЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса();
	ДанныеПоТаблице.ТаблицыИсточники = СоздатьЛокальнуюПеременную_ДанныеПоТаблицам();
    ДанныеПоТаблице.ДанныеПоПолям = СоздатьЛокальнуюПеременную_ДанныеПоПолям();
	
	#Область Поля
	
	Для каждого ПоляКолонкиСхемыЗапроса из ЗапросВыбораСхемыЗапроса.Колонки цикл
		СтрПоле = ДанныеПоТаблице.ДанныеПоПолям.Добавить();
		СтрПоле.Псевдоним = ПоляКолонкиСхемыЗапроса.Псевдоним;
		СтрПоле.ТипЗначения = ПоляКолонкиСхемыЗапроса.ТипЗначения;
	КонецЦикла; 
	
	#КонецОбласти //Поля
	
	Запрос = Новый Запрос(ЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса());
	СписокПараметров = Запрос.НайтиПараметры();	
	Для каждого ДанныеПоПараметру из СписокПараметров цикл
		ДанныеПоТаблице.ПараметрыЗапроса.Добавить("&" + ДанныеПоПараметру.Имя);	
	КонецЦикла;
	
	Если ЗапросВыбораСхемыЗапроса.Операторы.Количество() > 1 тогда 
		Для ИндексОператора = 0  по ЗапросВыбораСхемыЗапроса.Операторы.Количество()-1 цикл
			ОператорВыбратьСхемыЗапроса = ЗапросВыбораСхемыЗапроса.Операторы[ИндексОператора];
			
			СхемаОдногоВыбрать = Новый СхемаЗапроса();
			СхемаОдногоВыбрать.УстановитьТекстЗапроса(ЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса());  
			Если СхемаОдногоВыбрать.ПакетЗапросов.Количество() <> 1 тогда
				ВызватьИсключение "Невозможная ошибка.";
			КонецЕсли;
			ТекЗапросВыбораСхемыЗапроса = СхемаОдногоВыбрать.ПакетЗапросов[0];
			ТекЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения = "";	
			Для счетчикДо = 0 по ИндексОператора-1 цикл
				ТекЗапросВыбораСхемыЗапроса.Операторы.Удалить(0);//Удаляю до	
			КонецЦикла;  
			//Сейчас нужный оператор становиться с индексом 0 и удаляю все остальные после него
			Пока ТекЗапросВыбораСхемыЗапроса.Операторы.Количество()<>1 цикл
				ТекЗапросВыбораСхемыЗапроса.Операторы.Удалить(1);	
			КонецЦикла;   	
			//ТекстОператора = ТекЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса(); 
			
			ДанныеПоТаблице2 = ДанныеПоТаблице.ТаблицыИсточники.Добавить();
			
			Анализ_ЗапросВыбораСхемыЗапроса(ТекЗапросВыбораСхемыЗапроса, ДанныеПоТаблице2, Истина);
		КонецЦикла;	 
	ИначеЕсли ЗапросВыбораСхемыЗапроса.Операторы.Количество() = 1 тогда
		Анализ_ОператорВыбратьСхемыЗапроса(ЗапросВыбораСхемыЗапроса.Операторы[0], ДанныеПоТаблице);	
	Иначе
		ВызватьИсключение "Невозможная ошибка 2023_04_22_22_30.";
	КонецЕсли;

КонецПроцедуры

Процедура Анализ_ОператорВыбратьСхемыЗапроса(ОператорВыбратьСхемыЗапроса, ДанныеПоТаблице) 
	
	Для каждого ИсточникСхемыЗапроса из ОператорВыбратьСхемыЗапроса.Источники цикл
		
		ИстСхемыЗапроса = ИсточникСхемыЗапроса.Источник;
		Если ТипЗнч(ИстСхемыЗапроса) = Тип("ТаблицаСхемыЗапроса") тогда 
			СтрТаблицаИсточник = ДанныеПоТаблице.ТаблицыИсточники.Добавить(); 
			СтрТаблицаИсточник.ИмяВт = ИстСхемыЗапроса.ИмяТаблицы;
			СтрТаблицаИсточник.ЭтоВыводИсточника = Истина;
		ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ВложенныйЗапросСхемыЗапроса") тогда
			
			лЗапросВыбораСхемыЗапроса = ИстСхемыЗапроса.Запрос; //лЗапросВыбораСхемыЗапроса.ПолучитьТекстЗапроса()	
			//Анализ
			ДанныеПоТаблице2 = ДанныеПоТаблице.ТаблицыИсточники.Добавить();
			Анализ_ЗапросВыбораСхемыЗапроса(лЗапросВыбораСхемыЗапроса, ДанныеПоТаблице2, Истина);
			
		ИначеЕсли ТипЗнч(ИстСхемыЗапроса) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") тогда 
			СтрТаблицаИсточник = ДанныеПоТаблице.ТаблицыИсточники.Добавить(); 
			СтрТаблицаИсточник.ИмяВт = ИстСхемыЗапроса.ИмяТаблицы;
			СтрТаблицаИсточник.ЭтоВыводИсточника = Истина;
		Иначе
			ВызватьИсключение "Невозможная ошибка. 2023_04_15__10_53";	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

#Область ЛокальныеПеременные

Функция СоздатьЛокальнуюПеременную_ДанныеПоТаблицам()
	
	ДанныеПоТаблицам = Новый ТаблицаЗначений;
	ДанныеПоТаблицам.Колонки.Добавить("ИмяВт", Новый ОписаниеТипов("Строка"));
	ДанныеПоТаблицам.Колонки.Добавить("ТекстЗапроса", Новый ОписаниеТипов("Строка"));
	ДанныеПоТаблицам.Колонки.Добавить("ТаблицыИсточники", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДанныеПоТаблицам.Колонки.Добавить("ДанныеПоПолям", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДанныеПоТаблицам.Колонки.Добавить("ПараметрыЗапроса", Новый ОписаниеТипов("Массив"));
	ДанныеПоТаблицам.Колонки.Добавить("ЭтоУничтоженияТаблицы", Новый ОписаниеТипов("Булево"));  
	ДанныеПоТаблицам.Колонки.Добавить("ЭтоВыводИсточника", Новый ОписаниеТипов("Булево"));
	Возврат ДанныеПоТаблицам;
	
КонецФункции

Функция СоздатьЛокальнуюПеременную_ДанныеПоПолям()
	
	ДанныеПоТаблицам = Новый ТаблицаЗначений;
	ДанныеПоТаблицам.Колонки.Добавить("Псевдоним", Новый ОписаниеТипов("Строка"));
	ДанныеПоТаблицам.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	Возврат ДанныеПоТаблицам;
	
КонецФункции


#Область Анализ_ВыводТабДок

Процедура Анализ_ВыводДанныхПоТаблице(ДанныеПоТаблицам)
	
	рфТабДок.Очистить();
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("АнализЗапроса");
	ПустаяЯчейка = Макет.ПолучитьОбласть("ПустаяЯчейка");
	
	УникИменаТаблицЦвет = Новый Соответствие;
	#Область ЗаполнениеТаблицЦветов
	
	Для каждого ДанныеПоТаблице1 из ДанныеПоТаблицам цикл
		ИмяВт1 = ДанныеПоТаблице1.ИмяВт;
		УникИменаТаблицЦвет.Вставить(ИмяВт1);	
	КонецЦикла;
	
	счетчик = -1;
	Для каждого КлючЗнч из УникИменаТаблицЦвет цикл
		
		счетчик = счетчик + 1;
		Если счетчик >= рфЦветаАнализТаблиц.Количество() тогда
			Прервать;
		КонецЕсли;
		
		УникИменаТаблицЦвет.Вставить(КлючЗнч.Ключ, рфЦветаАнализТаблиц[счетчик].Цвет);
	КонецЦикла;
	
	#КонецОбласти //ЗаполнениеТаблицЦветов
	
	
	ДопДанныеДляВывода = Новый Структура();
	ДопДанныеДляВывода.Вставить("Макет", Макет);
	ДопДанныеДляВывода.Вставить("ПустаяЯчейка", ПустаяЯчейка);
	ДопДанныеДляВывода.Вставить("УникИменаТаблицЦвет", УникИменаТаблицЦвет);
	ДопДанныеДляВывода.Вставить("Нумератор_ОбластьДанныеПоТаблице",1);//Храниться Числовой нумератор
	ДопДанныеДляВывода.Вставить("ШиринаОтступа", 2);//ширина области ОбластьДанныеПоТаблице = 2 
	ДопДанныеДляВывода.Вставить("ТекНомер","");//В начале функции вывода формируется для удобства
	ДопДанныеДляВывода.Вставить("ТекОтступ","");//В начале функции вывода формируется для удобства
	УровеньВывода = 0;  
	
	
	Для счетчик = 0 по ДанныеПоТаблицам.Количество()-1 цикл 
		
		ДанныеПоТаблице = ДанныеПоТаблицам[счетчик];
		Анализ_ВыводДанныеПоТаблице(ДанныеПоТаблице, УровеньВывода, ДопДанныеДляВывода);
		
	КонецЦикла;
	
	рфТабДок.Область( , ,  ).АвтоВысотаСтроки = Ложь;
	рфТабДок.Область( , ,  ).ВысотаСтроки = 12;
	
КонецПроцедуры

Процедура Анализ_ВыводДанныеПоТаблице(ДанныеПоТаблице, УровеньВывода, ДопДанныеДляВывода)
	
	ДопДанныеДляВывода.ТекНомер = Формат(ДопДанныеДляВывода.Нумератор_ОбластьДанныеПоТаблице,"ЧН=0; ЧГ=0");
	ДопДанныеДляВывода.Нумератор_ОбластьДанныеПоТаблице = ДопДанныеДляВывода.Нумератор_ОбластьДанныеПоТаблице + 1;   
	ДопДанныеДляВывода.ТекОтступ = (УровеньВывода-1) * ДопДанныеДляВывода.ШиринаОтступа; 
	

	ОбластьДанныеПоТаблице = ДопДанныеДляВывода.Макет.ПолучитьОбласть("ОбластьДанныеПоТаблице");
	ОбластьДанныеПоТаблице.Параметры.ИмяВт = ДанныеПоТаблице.ИмяВт;
	ОбластьДанныеПоТаблице.Параметры.ТекстЗапроса = ДанныеПоТаблице.ТекстЗапроса;	
	
	Если ДанныеПоТаблице.ЭтоВыводИсточника тогда
		Если НЕ ПустаяСтрока(ДанныеПоТаблице.ТекстЗапроса) тогда
			ВызватьИсключение "Невозможная ошибка. 2023_04_23_00_43";
		КонецЕсли;
		Если ДанныеПоТаблице.ТаблицыИсточники.Количество() <> 0 тогда
			ВызватьИсключение "Невозможная ошибка. 2023_04_23_00_43";
		КонецЕсли; 

		ОбластьДанныеПоТаблице.Область(1,1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Авто; 
		ОбластьДанныеПоТаблице.Область(1,2).Текст = Неопределено; 
	КонецЕсли;
	
	рфТабДок.НачатьАвтогруппировкуСтрок();
	
	Анализ_ВывестиПрисоединитьОбласть(ОбластьДанныеПоТаблице, УровеньВывода, ДопДанныеДляВывода); 
	Цвет = ДопДанныеДляВывода.УникИменаТаблицЦвет[ДанныеПоТаблице.ИмяВт];
	Если Цвет <> Неопределено тогда
		рфТабДок.Область("ИмяВт_" + ДопДанныеДляВывода.ТекНомер).ЦветФона = Цвет;
	КонецЕсли;
	
	Если ДанныеПоТаблице.ПараметрыЗапроса.Количество() > 0 тогда
		
		Анализ_ВывестиИспользуемыеПараметры(ДанныеПоТаблице.ПараметрыЗапроса, УровеньВывода, ДопДанныеДляВывода);  
		
	КонецЕсли;    
	Анализ_ВывестиДанныеПоПолям(ДанныеПоТаблице.ДанныеПоПолям, УровеньВывода, ДопДанныеДляВывода);
	
    рфТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	Для каждого ДанныеПоТаблице2 из ДанныеПоТаблице.ТаблицыИсточники цикл
		Анализ_ВыводДанныеПоТаблице(ДанныеПоТаблице2, УровеньВывода + 1, ДопДанныеДляВывода);	
	КонецЦикла;
	
КонецПроцедуры 

Процедура Анализ_ВывестиПрисоединитьОбласть(Область, УровеньВывода, ДопДанныеДляВывода)   
	
	рфТабДок.Вывести(ДопДанныеДляВывода.ПустаяЯчейка, 1);
	
	Для счетчик = 0 по ДопДанныеДляВывода.ТекОтступ цикл
		рфТабДок.Присоединить(ДопДанныеДляВывода.ПустаяЯчейка, 1);	
	КонецЦикла;

	рфТабДок.Присоединить(Область, 1);               
	
	рфТабДок.Область("ИмяВт").Имя = "ИмяВт_" + ДопДанныеДляВывода.ТекНомер;
	рфТабДок.Область("ТекстЗапроса").Имя = "ТекстЗапроса_" + ДопДанныеДляВывода.ТекНомер;
	
КонецПроцедуры

Процедура Анализ_ВывестиИспользуемыеПараметры(ПараметрыЗапроса, УровеньВывода, ДопДанныеДляВывода)
	
	рфТабДок.Вывести(ДопДанныеДляВывода.ПустаяЯчейка, 2);
	Ячейка = ДопДанныеДляВывода.Макет.ПолучитьОбласть("Ячейка"); 
	Для счетчик = 0 по ДопДанныеДляВывода.ТекОтступ цикл
		рфТабДок.Присоединить(ДопДанныеДляВывода.ПустаяЯчейка, 2);	
	КонецЦикла;
	рфТабДок.Присоединить(ДопДанныеДляВывода.ПустаяЯчейка, 2);//Чтобы вывод параметров начинался под текстом запроса
	
	Ячейка.Область(1,1).Шрифт = Новый Шрифт(,,,Истина);
	Для каждого Параметр из ПараметрыЗапроса цикл
		Ячейка.Параметры.Ячейка = Параметр;  
		рфТабДок.Присоединить(Ячейка, 2);
	КонецЦикла;
	
КонецПроцедуры

Процедура Анализ_ВывестиДанныеПоПолям(ДанныеПоПолям, УровеньВывода, ДопДанныеДляВывода)
	
	рфТабДок.Вывести(ДопДанныеДляВывода.ПустаяЯчейка, 2);
	Ячейка = ДопДанныеДляВывода.Макет.ПолучитьОбласть("Ячейка"); 
	Для счетчик = 0 по ДопДанныеДляВывода.ТекОтступ цикл
		рфТабДок.Присоединить(ДопДанныеДляВывода.ПустаяЯчейка, 2);	
	КонецЦикла;	
	
	Для каждого Поле из ДанныеПоПолям цикл
		Ячейка.Параметры.Ячейка = Поле.Псевдоним;  
		рфТабДок.Присоединить(Ячейка, 2);
	КонецЦикла;
	
	рфТабДок.Вывести(ДопДанныеДляВывода.ПустаяЯчейка, 2);
	Ячейка = ДопДанныеДляВывода.Макет.ПолучитьОбласть("Ячейка"); 
	Для счетчик = 0 по ДопДанныеДляВывода.ТекОтступ цикл
		рфТабДок.Присоединить(ДопДанныеДляВывода.ПустаяЯчейка, 2);	
	КонецЦикла;	
	
	Для каждого Поле из ДанныеПоПолям цикл
		
		ДоступныеТипыМассив = Новый Массив;
		Для каждого ПотенцТип из Поле.ТипЗначения.Типы() цикл 
			
			МетаОб = Метаданные.НайтиПоТипу(ПотенцТип);	
			Если МетаОб = Неопределено тогда
				СтрТип = Строка(ПотенцТип);
			Иначе
				СтрТип = МетаОб.ПолноеИмя();	
			КонецЕсли;
			ДоступныеТипыМассив.Добавить(СтрТип);
		КонецЦикла;
		//ДоступныеТиры = СтрСоединить(лТекКолонка.ТипЗначения.Типы(),", "); 
		ДоступныеТиры = СтрСоединить(ДоступныеТипыМассив, ", ");
		
		
		Ячейка.Параметры.Ячейка = ДоступныеТиры;  
		рфТабДок.Присоединить(Ячейка, 2);
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ПрочитатьИзМакетаЦвета()
	
	рфЦветаАнализТаблиц.Очистить();	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");	
	ЦветаТД = Макет.ПолучитьОбласть("Цвета");
	
	КолонкаНомер = 1;
	КолонкаПорядок = 2;
	КолонкаЦвет = 3;
	
	Для счетчик = 1 по ЦветаТД.ВысотаТаблицы цикл
		Стр = рфЦветаАнализТаблиц.Добавить();
		Стр.Номер = ЦветаТД.Область(счетчик, КолонкаНомер).Текст; 
		Стр.Порядок = ЦветаТД.Область(счетчик, КолонкаПорядок).Текст;
		Стр.Цвет 	= ЦветаТД.Область(счетчик, КолонкаЦвет).ЦветФона;
	КонецЦикла;  
	рфЦветаАнализТаблиц.Сортировать("Порядок");
	
	ТЗ_Копия = РеквизитФормыВЗначение("рфЦветаАнализТаблиц");
	ТЗ_Копия.Свернуть("Порядок");
	УникальныеПорядок = ТЗ_Копия.ВыгрузитьКолонку("Порядок");	
	
	
	ТЗ_Копия = РеквизитФормыВЗначение("рфЦветаАнализТаблиц");
	ТЗ_Финальная = ТЗ_Копия.СкопироватьКолонки();
	
	СчетчикПорядка = 0;
	Пока ТЗ_Копия.Количество() > 0 цикл
		
		Если СчетчикПорядка >= УникальныеПорядок.Количество() тогда
			СчетчикПорядка = 0;	
		КонецЕсли;  
		ТекНомерПорядка = УникальныеПорядок[СчетчикПорядка]; 
		
		Стр = ТЗ_Копия.Найти(ТекНомерПорядка, "Порядок");
		Если Стр = Неопределено тогда
			УникальныеПорядок.Удалить(СчетчикПорядка);	
		Иначе
			Новая = ТЗ_Финальная.Добавить();
			ЗаполнитьЗначенияСвойств(Новая, Стр);   
			ТЗ_Копия.Удалить(Стр);
		КонецЕсли;
		
		СчетчикПорядка = СчетчикПорядка + 1;
		
	КонецЦикла;
	а = 4;
	ЗначениеВРеквизитФормы(ТЗ_Финальная, "рфЦветаАнализТаблиц");
	
	
	
КонецПроцедуры


#КонецОбласти     












